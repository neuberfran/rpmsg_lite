/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /home/neuberfran/diegosueiro/rpmsg-lite-zephyr-support/zephyr/samples/subsys/ipc/rpmsg_lite/zephyr/build/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /memory@4000000
 *   4   /cpus
 *   5   /cpus/cpu@0
 *   6   /gpio_keys
 *   7   /soc
 *   8   /soc/gpio@0
 *   9   /gpio_keys/button_0
 *   10  /gpio_keys/button_1
 *   11  /gpio_keys/button_2
 *   12  /leds
 *   13  /leds/led_0
 *   14  /soc/gpio@1
 *   15  /leds/led_1
 *   16  /leds/led_2
 *   17  /soc/interrupt-controller@e000e100
 *   18  /soc/syscon@40000000
 *   19  /soc/iocon@40001000
 *   20  /soc/iocon@40001000/pinctrl
 *   21  /soc/iocon@40001000/pinctrl/pinmux_flexcomm0_usart
 *   22  /soc/flexcomm@40086000
 *   23  /soc/flexcomm@40087000
 *   24  /soc/flexcomm@40088000
 *   25  /soc/flexcomm@40089000
 *   26  /soc/iocon@40001000/pinctrl/pinmux_flexcomm4_i2c
 *   27  /soc/flexcomm@4008a000
 *   28  /soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi
 *   29  /soc/flexcomm@40096000
 *   30  /soc/flexcomm@40097000
 *   31  /soc/flexcomm@40098000
 *   32  /soc/mailbox@4008b000
 *   33  /soc/memory@04000000
 *   34  /soc/memory@20000000
 *   35  /soc/memory@20010000
 *   36  /soc/memory@20020000
 *   37  /soc/pint@40004000
 *   38  /soc/timer@e000e010
 *   39  /soc/flash-controller@4009c000
 *   40  /soc/flash-controller@4009c000/flash@0
 *   41  /soc/flash-controller@4009c000/flash@0/partitions
 *   42  /soc/flash-controller@4009c000/flash@0/partitions/partition@0
 *   43  /soc/flash-controller@4009c000/flash@0/partitions/partition@10000
 *   44  /soc/flash-controller@4009c000/flash@0/partitions/partition@30000
 *   45  /soc/iocon@40001000/pinctrl/pinmux_flexcomm0_usart/group0
 *   46  /soc/iocon@40001000/pinctrl/pinmux_flexcomm4_i2c/group0
 *   47  /soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi/group0
 *   48  /soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi/group1
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/* Used to remove brackets from around a single argument */
#define DT_DEBRACKET_INTERNAL(...) __VA_ARGS__

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"

/* Helper macros for child nodes of this node. */
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_leds) fn(DT_N_S_gpio_keys) fn(DT_N_S_memory_4000000)
#define DT_N_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_4000000)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_gpio_keys, __VA_ARGS__) fn(DT_N_S_memory_4000000, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_4000000, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_leds) fn(DT_N_S_gpio_keys) fn(DT_N_S_memory_4000000)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_4000000)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_leds, __VA_ARGS__) fn(DT_N_S_gpio_keys, __VA_ARGS__) fn(DT_N_S_memory_4000000, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_4000000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /memory@4000000 */ \
	4, /* /cpus */ \
	6, /* /gpio_keys */ \
	7, /* /soc */ \
	12, /* /leds */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_nxp_lpc54xxx DT_N
#define DT_N_INST_0_nxp_lpc      DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_nxp_lpc54xxx 1
#define DT_N_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_COMPAT_MODEL_IDX_0 "lpc54xxx"
#define DT_N_COMPAT_MATCHES_nxp_lpc 1
#define DT_N_COMPAT_VENDOR_IDX_1_EXISTS 1
#define DT_N_COMPAT_VENDOR_IDX_1 "NXP Semiconductors"
#define DT_N_COMPAT_MODEL_IDX_1_EXISTS 1
#define DT_N_COMPAT_MODEL_IDX_1 "lpc"
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"nxp,lpc54xxx", "nxp,lpc"}
#define DT_N_P_compatible_IDX_0 "nxp,lpc54xxx"
#define DT_N_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc54xxx
#define DT_N_P_compatible_IDX_0_STRING_TOKEN nxp_lpc54xxx
#define DT_N_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC54XXX
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_IDX_1 "nxp,lpc"
#define DT_N_P_compatible_IDX_1_STRING_UNQUOTED nxp,lpc
#define DT_N_P_compatible_IDX_1_STRING_TOKEN nxp_lpc
#define DT_N_P_compatible_IDX_1_STRING_UPPER_TOKEN NXP_LPC
#define DT_N_P_compatible_IDX_1_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0) \
	fn(DT_N, compatible, 1)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N, compatible, 1)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__) \
	fn(DT_N, compatible, 1, __VA_ARGS__)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N, compatible, 1, __VA_ARGS__)
#define DT_N_P_compatible_LEN 2
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_aliases_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /memory@4000000
 *
 * Node identifier: DT_N_S_memory_4000000
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_memory_4000000_PATH "/memory@4000000"

/* Node's name with unit-address: */
#define DT_N_S_memory_4000000_FULL_NAME "memory@4000000"

/* Node parent (/) identifier: */
#define DT_N_S_memory_4000000_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_memory_4000000_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_memory_4000000_FOREACH_CHILD(fn) 
#define DT_N_S_memory_4000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_memory_4000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_memory_4000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_memory_4000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_memory_4000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_memory_4000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_memory_4000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_memory_4000000_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_memory_4000000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_memory_4000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_memory_4000000_EXISTS 1
#define DT_N_INST_4_mmio_sram DT_N_S_memory_4000000
#define DT_N_NODELABEL_sramx1 DT_N_S_memory_4000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_memory_4000000_REG_NUM 1
#define DT_N_S_memory_4000000_REG_IDX_0_EXISTS 1
#define DT_N_S_memory_4000000_REG_IDX_0_VAL_ADDRESS 67108864 /* 0x4000000 */
#define DT_N_S_memory_4000000_REG_IDX_0_VAL_SIZE 32768 /* 0x8000 */
#define DT_N_S_memory_4000000_RANGES_NUM 0
#define DT_N_S_memory_4000000_FOREACH_RANGE(fn) 
#define DT_N_S_memory_4000000_IRQ_NUM 0
#define DT_N_S_memory_4000000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_memory_4000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_memory_4000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_memory_4000000_P_reg {67108864 /* 0x4000000 */, 32768 /* 0x8000 */}
#define DT_N_S_memory_4000000_P_reg_IDX_0 67108864
#define DT_N_S_memory_4000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_memory_4000000_P_reg_IDX_1 32768
#define DT_N_S_memory_4000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_memory_4000000_P_reg_EXISTS 1
#define DT_N_S_memory_4000000_P_compatible {"mmio-sram"}
#define DT_N_S_memory_4000000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_memory_4000000_P_compatible_IDX_0_STRING_UNQUOTED mmio-sram
#define DT_N_S_memory_4000000_P_compatible_IDX_0_STRING_TOKEN mmio_sram
#define DT_N_S_memory_4000000_P_compatible_IDX_0_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_memory_4000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_memory_4000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_4000000, compatible, 0)
#define DT_N_S_memory_4000000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_memory_4000000, compatible, 0)
#define DT_N_S_memory_4000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_4000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_memory_4000000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_memory_4000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_memory_4000000_P_compatible_LEN 1
#define DT_N_S_memory_4000000_P_compatible_EXISTS 1
#define DT_N_S_memory_4000000_P_wakeup_source 0
#define DT_N_S_memory_4000000_P_wakeup_source_EXISTS 1
#define DT_N_S_memory_4000000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_memory_4000000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	5, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = arm,cortex-m4f):
 *   $ZEPHYR_BASE/dts/bindings/cpu/arm,cortex-m4f.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	4, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_arm_cortex_m4f DT_N_S_cpus_S_cpu_0
#define DT_N_NODELABEL_cpu0        DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_arm_cortex_m4f 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0 "cortex-m4f"
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency 48000000
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"arm,cortex-m4f"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "arm,cortex-m4f"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UNQUOTED arm,cortex-m4f
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_TOKEN arm_cortex_m4f
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_CORTEX_M4F
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /gpio_keys
 *
 * Node identifier: DT_N_S_gpio_keys
 *
 * Binding (compatible = gpio-keys):
 *   $ZEPHYR_BASE/dts/bindings/input/gpio-keys.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_gpio_keys_PATH "/gpio_keys"

/* Node's name with unit-address: */
#define DT_N_S_gpio_keys_FULL_NAME "gpio_keys"

/* Node parent (/) identifier: */
#define DT_N_S_gpio_keys_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_gpio_keys_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_gpio_keys_FOREACH_CHILD(fn) fn(DT_N_S_gpio_keys_S_button_0) fn(DT_N_S_gpio_keys_S_button_1) fn(DT_N_S_gpio_keys_S_button_2)
#define DT_N_S_gpio_keys_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys_S_button_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys_S_button_2)
#define DT_N_S_gpio_keys_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button_0, __VA_ARGS__) fn(DT_N_S_gpio_keys_S_button_1, __VA_ARGS__) fn(DT_N_S_gpio_keys_S_button_2, __VA_ARGS__)
#define DT_N_S_gpio_keys_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys_S_button_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys_S_button_2, __VA_ARGS__)
#define DT_N_S_gpio_keys_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_gpio_keys_S_button_0) fn(DT_N_S_gpio_keys_S_button_1) fn(DT_N_S_gpio_keys_S_button_2)
#define DT_N_S_gpio_keys_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys_S_button_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys_S_button_2)
#define DT_N_S_gpio_keys_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button_0, __VA_ARGS__) fn(DT_N_S_gpio_keys_S_button_1, __VA_ARGS__) fn(DT_N_S_gpio_keys_S_button_2, __VA_ARGS__)
#define DT_N_S_gpio_keys_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys_S_button_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_gpio_keys_S_button_2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_gpio_keys_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_gpio_keys_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_gpio_keys_SUPPORTS_ORDS \
	9, /* /gpio_keys/button_0 */ \
	10, /* /gpio_keys/button_1 */ \
	11, /* /gpio_keys/button_2 */

/* Existence and alternate IDs: */
#define DT_N_S_gpio_keys_EXISTS 1
#define DT_N_INST_0_gpio_keys DT_N_S_gpio_keys

/* Macros for properties that are special in the specification: */
#define DT_N_S_gpio_keys_REG_NUM 0
#define DT_N_S_gpio_keys_RANGES_NUM 0
#define DT_N_S_gpio_keys_FOREACH_RANGE(fn) 
#define DT_N_S_gpio_keys_IRQ_NUM 0
#define DT_N_S_gpio_keys_COMPAT_MATCHES_gpio_keys 1
#define DT_N_S_gpio_keys_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_gpio_keys_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_gpio_keys_P_debounce_interval_ms 30
#define DT_N_S_gpio_keys_P_debounce_interval_ms_EXISTS 1
#define DT_N_S_gpio_keys_P_compatible {"gpio-keys"}
#define DT_N_S_gpio_keys_P_compatible_IDX_0 "gpio-keys"
#define DT_N_S_gpio_keys_P_compatible_IDX_0_STRING_UNQUOTED gpio-keys
#define DT_N_S_gpio_keys_P_compatible_IDX_0_STRING_TOKEN gpio_keys
#define DT_N_S_gpio_keys_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_KEYS
#define DT_N_S_gpio_keys_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_gpio_keys_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_keys, compatible, 0)
#define DT_N_S_gpio_keys_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_keys, compatible, 0)
#define DT_N_S_gpio_keys_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_keys, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys, compatible, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_P_compatible_LEN 1
#define DT_N_S_gpio_keys_P_compatible_EXISTS 1
#define DT_N_S_gpio_keys_P_wakeup_source 0
#define DT_N_S_gpio_keys_P_wakeup_source_EXISTS 1
#define DT_N_S_gpio_keys_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_gpio_keys_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_syscon_40000000) fn(DT_N_S_soc_S_memory_20000000) fn(DT_N_S_soc_S_memory_20010000) fn(DT_N_S_soc_S_memory_20020000) fn(DT_N_S_soc_S_memory_04000000) fn(DT_N_S_soc_S_flash_controller_4009c000) fn(DT_N_S_soc_S_iocon_40001000) fn(DT_N_S_soc_S_gpio_0) fn(DT_N_S_soc_S_gpio_1) fn(DT_N_S_soc_S_pint_40004000) fn(DT_N_S_soc_S_mailbox_4008b000) fn(DT_N_S_soc_S_flexcomm_40086000) fn(DT_N_S_soc_S_flexcomm_40087000) fn(DT_N_S_soc_S_flexcomm_40088000) fn(DT_N_S_soc_S_flexcomm_40089000) fn(DT_N_S_soc_S_flexcomm_4008a000) fn(DT_N_S_soc_S_flexcomm_40096000) fn(DT_N_S_soc_S_flexcomm_40097000) fn(DT_N_S_soc_S_flexcomm_40098000)
#define DT_N_S_soc_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_e000e100) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_syscon_40000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20010000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20020000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_04000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_4009c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pint_40004000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_mailbox_4008b000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40086000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40087000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40088000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40089000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_4008a000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40096000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40097000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40098000)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_syscon_40000000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_20000000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_20010000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_20020000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_04000000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_4009c000, __VA_ARGS__) fn(DT_N_S_soc_S_iocon_40001000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_1, __VA_ARGS__) fn(DT_N_S_soc_S_pint_40004000, __VA_ARGS__) fn(DT_N_S_soc_S_mailbox_4008b000, __VA_ARGS__) fn(DT_N_S_soc_S_flexcomm_40086000, __VA_ARGS__) fn(DT_N_S_soc_S_flexcomm_40087000, __VA_ARGS__) fn(DT_N_S_soc_S_flexcomm_40088000, __VA_ARGS__) fn(DT_N_S_soc_S_flexcomm_40089000, __VA_ARGS__) fn(DT_N_S_soc_S_flexcomm_4008a000, __VA_ARGS__) fn(DT_N_S_soc_S_flexcomm_40096000, __VA_ARGS__) fn(DT_N_S_soc_S_flexcomm_40097000, __VA_ARGS__) fn(DT_N_S_soc_S_flexcomm_40098000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_syscon_40000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20010000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20020000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_04000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_4009c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pint_40004000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_mailbox_4008b000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40086000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40087000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40088000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40089000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_4008a000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40096000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40097000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40098000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_syscon_40000000) fn(DT_N_S_soc_S_memory_20000000) fn(DT_N_S_soc_S_memory_20010000) fn(DT_N_S_soc_S_memory_20020000) fn(DT_N_S_soc_S_memory_04000000) fn(DT_N_S_soc_S_flash_controller_4009c000) fn(DT_N_S_soc_S_iocon_40001000) fn(DT_N_S_soc_S_gpio_0) fn(DT_N_S_soc_S_gpio_1) fn(DT_N_S_soc_S_pint_40004000) fn(DT_N_S_soc_S_mailbox_4008b000) fn(DT_N_S_soc_S_flexcomm_40086000) fn(DT_N_S_soc_S_flexcomm_4008a000) fn(DT_N_S_soc_S_flexcomm_40096000)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_e000e100) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_syscon_40000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20010000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20020000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_04000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_4009c000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pint_40004000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_mailbox_4008b000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40086000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_4008a000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40096000)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_syscon_40000000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_20000000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_20010000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_20020000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_04000000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_4009c000, __VA_ARGS__) fn(DT_N_S_soc_S_iocon_40001000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_1, __VA_ARGS__) fn(DT_N_S_soc_S_pint_40004000, __VA_ARGS__) fn(DT_N_S_soc_S_mailbox_4008b000, __VA_ARGS__) fn(DT_N_S_soc_S_flexcomm_40086000, __VA_ARGS__) fn(DT_N_S_soc_S_flexcomm_4008a000, __VA_ARGS__) fn(DT_N_S_soc_S_flexcomm_40096000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_syscon_40000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20010000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_20020000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_memory_04000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_4009c000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pint_40004000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_mailbox_4008b000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40086000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_4008a000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flexcomm_40096000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	8, /* /soc/gpio@0 */ \
	14, /* /soc/gpio@1 */ \
	17, /* /soc/interrupt-controller@e000e100 */ \
	18, /* /soc/syscon@40000000 */ \
	19, /* /soc/iocon@40001000 */ \
	22, /* /soc/flexcomm@40086000 */ \
	23, /* /soc/flexcomm@40087000 */ \
	24, /* /soc/flexcomm@40088000 */ \
	25, /* /soc/flexcomm@40089000 */ \
	27, /* /soc/flexcomm@4008a000 */ \
	29, /* /soc/flexcomm@40096000 */ \
	30, /* /soc/flexcomm@40097000 */ \
	31, /* /soc/flexcomm@40098000 */ \
	32, /* /soc/mailbox@4008b000 */ \
	33, /* /soc/memory@04000000 */ \
	34, /* /soc/memory@20000000 */ \
	35, /* /soc/memory@20010000 */ \
	36, /* /soc/memory@20020000 */ \
	37, /* /soc/pint@40004000 */ \
	38, /* /soc/timer@e000e010 */ \
	39, /* /soc/flash-controller@4009c000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UNQUOTED simple-bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_TOKEN simple_bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UPPER_TOKEN SIMPLE_BUS
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/gpio@0
 *
 * Node identifier: DT_N_S_soc_S_gpio_0
 *
 * Binding (compatible = nxp,lpc-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/nxp,lpc-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_0_PATH "/soc/gpio@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_0_FULL_NAME "gpio@0"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_0_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_0_CHILD_IDX 9

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_0_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_0_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_0_SUPPORTS_ORDS \
	9, /* /gpio_keys/button_0 */ \
	10, /* /gpio_keys/button_1 */ \
	11, /* /gpio_keys/button_2 */ \
	13, /* /leds/led_0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_0_EXISTS 1
#define DT_N_ALIAS_gpio_0        DT_N_S_soc_S_gpio_0
#define DT_N_INST_0_nxp_lpc_gpio DT_N_S_soc_S_gpio_0
#define DT_N_NODELABEL_gpio0     DT_N_S_soc_S_gpio_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_0_REG_NUM 1
#define DT_N_S_soc_S_gpio_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_0_REG_IDX_0_VAL_ADDRESS 1074315264 /* 0x4008c000 */
#define DT_N_S_soc_S_gpio_0_REG_IDX_0_VAL_SIZE 9352 /* 0x2488 */
#define DT_N_S_soc_S_gpio_0_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_0_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_0_COMPAT_MATCHES_nxp_lpc_gpio 1
#define DT_N_S_soc_S_gpio_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_0_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_gpio_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_0_COMPAT_MODEL_IDX_0 "lpc-gpio"
#define DT_N_S_soc_S_gpio_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_0_P_reg {1074315264 /* 0x4008c000 */, 9352 /* 0x2488 */}
#define DT_N_S_soc_S_gpio_0_P_reg_IDX_0 1074315264
#define DT_N_S_soc_S_gpio_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_0_P_reg_IDX_1 9352
#define DT_N_S_soc_S_gpio_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_0_P_port 0
#define DT_N_S_soc_S_gpio_0_P_port_ENUM_IDX 0
#define DT_N_S_soc_S_gpio_0_P_port_ENUM_VAL_0_EXISTS 1
#define DT_N_S_soc_S_gpio_0_P_port_EXISTS 1
#define DT_N_S_soc_S_gpio_0_P_int_source "pint"
#define DT_N_S_soc_S_gpio_0_P_int_source_STRING_UNQUOTED pint
#define DT_N_S_soc_S_gpio_0_P_int_source_STRING_TOKEN pint
#define DT_N_S_soc_S_gpio_0_P_int_source_STRING_UPPER_TOKEN PINT
#define DT_N_S_soc_S_gpio_0_P_int_source_IDX_0 "pint"
#define DT_N_S_soc_S_gpio_0_P_int_source_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_0_P_int_source_ENUM_IDX 0
#define DT_N_S_soc_S_gpio_0_P_int_source_ENUM_VAL_pint_EXISTS 1
#define DT_N_S_soc_S_gpio_0_P_int_source_ENUM_TOKEN pint
#define DT_N_S_soc_S_gpio_0_P_int_source_ENUM_UPPER_TOKEN PINT
#define DT_N_S_soc_S_gpio_0_P_int_source_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_0, int_source, 0)
#define DT_N_S_soc_S_gpio_0_P_int_source_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_0, int_source, 0)
#define DT_N_S_soc_S_gpio_0_P_int_source_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_0, int_source, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_0_P_int_source_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_0, int_source, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_0_P_int_source_LEN 1
#define DT_N_S_soc_S_gpio_0_P_int_source_EXISTS 1
#define DT_N_S_soc_S_gpio_0_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_0_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_0_P_ngpios 32
#define DT_N_S_soc_S_gpio_0_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_0_P_compatible {"nxp,lpc-gpio"}
#define DT_N_S_soc_S_gpio_0_P_compatible_IDX_0 "nxp,lpc-gpio"
#define DT_N_S_soc_S_gpio_0_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc-gpio
#define DT_N_S_soc_S_gpio_0_P_compatible_IDX_0_STRING_TOKEN nxp_lpc_gpio
#define DT_N_S_soc_S_gpio_0_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC_GPIO
#define DT_N_S_soc_S_gpio_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_0, compatible, 0)
#define DT_N_S_soc_S_gpio_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_0, compatible, 0)
#define DT_N_S_soc_S_gpio_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_0_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_0_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_0_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /gpio_keys/button_0
 *
 * Node identifier: DT_N_S_gpio_keys_S_button_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_gpio_keys_S_button_0_PATH "/gpio_keys/button_0"

/* Node's name with unit-address: */
#define DT_N_S_gpio_keys_S_button_0_FULL_NAME "button_0"

/* Node parent (/gpio_keys) identifier: */
#define DT_N_S_gpio_keys_S_button_0_PARENT DT_N_S_gpio_keys

/* Node's index in its parent's list of children: */
#define DT_N_S_gpio_keys_S_button_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_gpio_keys_S_button_0_FOREACH_CHILD(fn) 
#define DT_N_S_gpio_keys_S_button_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_gpio_keys_S_button_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_gpio_keys_S_button_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_gpio_keys_S_button_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_gpio_keys_S_button_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_gpio_keys_S_button_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_gpio_keys_S_button_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_gpio_keys_S_button_0_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_gpio_keys_S_button_0_REQUIRES_ORDS \
	6, /* /gpio_keys */ \
	8, /* /soc/gpio@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_gpio_keys_S_button_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_gpio_keys_S_button_0_EXISTS 1
#define DT_N_ALIAS_sw0               DT_N_S_gpio_keys_S_button_0
#define DT_N_NODELABEL_user_button_1 DT_N_S_gpio_keys_S_button_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_gpio_keys_S_button_0_REG_NUM 0
#define DT_N_S_gpio_keys_S_button_0_RANGES_NUM 0
#define DT_N_S_gpio_keys_S_button_0_FOREACH_RANGE(fn) 
#define DT_N_S_gpio_keys_S_button_0_IRQ_NUM 0
#define DT_N_S_gpio_keys_S_button_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_gpio_keys_S_button_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_gpio_keys_S_button_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_gpio_keys_S_button_0_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_0
#define DT_N_S_gpio_keys_S_button_0_P_gpios_IDX_0_VAL_pin 24
#define DT_N_S_gpio_keys_S_button_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_gpio_keys_S_button_0_P_gpios_IDX_0_VAL_flags 1
#define DT_N_S_gpio_keys_S_button_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_gpio_keys_S_button_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_keys_S_button_0, gpios, 0)
#define DT_N_S_gpio_keys_S_button_0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button_0, gpios, 0)
#define DT_N_S_gpio_keys_S_button_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_0_P_gpios_LEN 1
#define DT_N_S_gpio_keys_S_button_0_P_gpios_EXISTS 1
#define DT_N_S_gpio_keys_S_button_0_P_label "User SW1"
#define DT_N_S_gpio_keys_S_button_0_P_label_STRING_UNQUOTED User SW1
#define DT_N_S_gpio_keys_S_button_0_P_label_STRING_TOKEN User_SW1
#define DT_N_S_gpio_keys_S_button_0_P_label_STRING_UPPER_TOKEN USER_SW1
#define DT_N_S_gpio_keys_S_button_0_P_label_IDX_0 "User SW1"
#define DT_N_S_gpio_keys_S_button_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_gpio_keys_S_button_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_keys_S_button_0, label, 0)
#define DT_N_S_gpio_keys_S_button_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button_0, label, 0)
#define DT_N_S_gpio_keys_S_button_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button_0, label, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button_0, label, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_0_P_label_LEN 1
#define DT_N_S_gpio_keys_S_button_0_P_label_EXISTS 1
#define DT_N_S_gpio_keys_S_button_0_P_zephyr_code 0
#define DT_N_S_gpio_keys_S_button_0_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /gpio_keys/button_1
 *
 * Node identifier: DT_N_S_gpio_keys_S_button_1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_gpio_keys_S_button_1_PATH "/gpio_keys/button_1"

/* Node's name with unit-address: */
#define DT_N_S_gpio_keys_S_button_1_FULL_NAME "button_1"

/* Node parent (/gpio_keys) identifier: */
#define DT_N_S_gpio_keys_S_button_1_PARENT DT_N_S_gpio_keys

/* Node's index in its parent's list of children: */
#define DT_N_S_gpio_keys_S_button_1_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD(fn) 
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_gpio_keys_S_button_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_gpio_keys_S_button_1_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_gpio_keys_S_button_1_REQUIRES_ORDS \
	6, /* /gpio_keys */ \
	8, /* /soc/gpio@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_gpio_keys_S_button_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_gpio_keys_S_button_1_EXISTS 1
#define DT_N_ALIAS_sw1               DT_N_S_gpio_keys_S_button_1
#define DT_N_NODELABEL_user_button_2 DT_N_S_gpio_keys_S_button_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_gpio_keys_S_button_1_REG_NUM 0
#define DT_N_S_gpio_keys_S_button_1_RANGES_NUM 0
#define DT_N_S_gpio_keys_S_button_1_FOREACH_RANGE(fn) 
#define DT_N_S_gpio_keys_S_button_1_IRQ_NUM 0
#define DT_N_S_gpio_keys_S_button_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_gpio_keys_S_button_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_gpio_keys_S_button_1_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_gpio_keys_S_button_1_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_0
#define DT_N_S_gpio_keys_S_button_1_P_gpios_IDX_0_VAL_pin 31
#define DT_N_S_gpio_keys_S_button_1_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_gpio_keys_S_button_1_P_gpios_IDX_0_VAL_flags 17
#define DT_N_S_gpio_keys_S_button_1_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_gpio_keys_S_button_1_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_keys_S_button_1, gpios, 0)
#define DT_N_S_gpio_keys_S_button_1_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button_1, gpios, 0)
#define DT_N_S_gpio_keys_S_button_1_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button_1, gpios, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_1_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button_1, gpios, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_1_P_gpios_LEN 1
#define DT_N_S_gpio_keys_S_button_1_P_gpios_EXISTS 1
#define DT_N_S_gpio_keys_S_button_1_P_label "User SW2"
#define DT_N_S_gpio_keys_S_button_1_P_label_STRING_UNQUOTED User SW2
#define DT_N_S_gpio_keys_S_button_1_P_label_STRING_TOKEN User_SW2
#define DT_N_S_gpio_keys_S_button_1_P_label_STRING_UPPER_TOKEN USER_SW2
#define DT_N_S_gpio_keys_S_button_1_P_label_IDX_0 "User SW2"
#define DT_N_S_gpio_keys_S_button_1_P_label_IDX_0_EXISTS 1
#define DT_N_S_gpio_keys_S_button_1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_keys_S_button_1, label, 0)
#define DT_N_S_gpio_keys_S_button_1_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button_1, label, 0)
#define DT_N_S_gpio_keys_S_button_1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button_1, label, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_1_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button_1, label, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_1_P_label_LEN 1
#define DT_N_S_gpio_keys_S_button_1_P_label_EXISTS 1
#define DT_N_S_gpio_keys_S_button_1_P_zephyr_code 0
#define DT_N_S_gpio_keys_S_button_1_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /gpio_keys/button_2
 *
 * Node identifier: DT_N_S_gpio_keys_S_button_2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_gpio_keys_S_button_2_PATH "/gpio_keys/button_2"

/* Node's name with unit-address: */
#define DT_N_S_gpio_keys_S_button_2_FULL_NAME "button_2"

/* Node parent (/gpio_keys) identifier: */
#define DT_N_S_gpio_keys_S_button_2_PARENT DT_N_S_gpio_keys

/* Node's index in its parent's list of children: */
#define DT_N_S_gpio_keys_S_button_2_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_gpio_keys_S_button_2_FOREACH_CHILD(fn) 
#define DT_N_S_gpio_keys_S_button_2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_gpio_keys_S_button_2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_gpio_keys_S_button_2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_gpio_keys_S_button_2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_gpio_keys_S_button_2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_gpio_keys_S_button_2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_gpio_keys_S_button_2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_gpio_keys_S_button_2_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_gpio_keys_S_button_2_REQUIRES_ORDS \
	6, /* /gpio_keys */ \
	8, /* /soc/gpio@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_gpio_keys_S_button_2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_gpio_keys_S_button_2_EXISTS 1
#define DT_N_ALIAS_sw2               DT_N_S_gpio_keys_S_button_2
#define DT_N_NODELABEL_user_button_3 DT_N_S_gpio_keys_S_button_2

/* Macros for properties that are special in the specification: */
#define DT_N_S_gpio_keys_S_button_2_REG_NUM 0
#define DT_N_S_gpio_keys_S_button_2_RANGES_NUM 0
#define DT_N_S_gpio_keys_S_button_2_FOREACH_RANGE(fn) 
#define DT_N_S_gpio_keys_S_button_2_IRQ_NUM 0
#define DT_N_S_gpio_keys_S_button_2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_gpio_keys_S_button_2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_gpio_keys_S_button_2_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_gpio_keys_S_button_2_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_0
#define DT_N_S_gpio_keys_S_button_2_P_gpios_IDX_0_VAL_pin 4
#define DT_N_S_gpio_keys_S_button_2_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_gpio_keys_S_button_2_P_gpios_IDX_0_VAL_flags 17
#define DT_N_S_gpio_keys_S_button_2_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_gpio_keys_S_button_2_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_keys_S_button_2, gpios, 0)
#define DT_N_S_gpio_keys_S_button_2_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button_2, gpios, 0)
#define DT_N_S_gpio_keys_S_button_2_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button_2, gpios, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_2_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button_2, gpios, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_2_P_gpios_LEN 1
#define DT_N_S_gpio_keys_S_button_2_P_gpios_EXISTS 1
#define DT_N_S_gpio_keys_S_button_2_P_label "User SW3"
#define DT_N_S_gpio_keys_S_button_2_P_label_STRING_UNQUOTED User SW3
#define DT_N_S_gpio_keys_S_button_2_P_label_STRING_TOKEN User_SW3
#define DT_N_S_gpio_keys_S_button_2_P_label_STRING_UPPER_TOKEN USER_SW3
#define DT_N_S_gpio_keys_S_button_2_P_label_IDX_0 "User SW3"
#define DT_N_S_gpio_keys_S_button_2_P_label_IDX_0_EXISTS 1
#define DT_N_S_gpio_keys_S_button_2_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_gpio_keys_S_button_2, label, 0)
#define DT_N_S_gpio_keys_S_button_2_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_gpio_keys_S_button_2, label, 0)
#define DT_N_S_gpio_keys_S_button_2_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_gpio_keys_S_button_2, label, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_2_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_gpio_keys_S_button_2, label, 0, __VA_ARGS__)
#define DT_N_S_gpio_keys_S_button_2_P_label_LEN 1
#define DT_N_S_gpio_keys_S_button_2_P_label_EXISTS 1
#define DT_N_S_gpio_keys_S_button_2_P_zephyr_code 0
#define DT_N_S_gpio_keys_S_button_2_P_zephyr_code_EXISTS 1

/*
 * Devicetree node: /leds
 *
 * Node identifier: DT_N_S_leds
 *
 * Binding (compatible = gpio-leds):
 *   $ZEPHYR_BASE/dts/bindings/led/gpio-leds.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_PATH "/leds"

/* Node's name with unit-address: */
#define DT_N_S_leds_FULL_NAME "leds"

/* Node parent (/) identifier: */
#define DT_N_S_leds_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_FOREACH_CHILD(fn) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_leds_S_led_1) fn(DT_N_S_leds_S_led_2)
#define DT_N_S_leds_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_leds_S_led_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds_S_led_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds_S_led_2)
#define DT_N_S_leds_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) fn(DT_N_S_leds_S_led_1, __VA_ARGS__) fn(DT_N_S_leds_S_led_2, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds_S_led_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds_S_led_2, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_leds_S_led_1) fn(DT_N_S_leds_S_led_2)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_leds_S_led_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds_S_led_1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds_S_led_2)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) fn(DT_N_S_leds_S_led_1, __VA_ARGS__) fn(DT_N_S_leds_S_led_2, __VA_ARGS__)
#define DT_N_S_leds_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds_S_led_1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_leds_S_led_2, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_leds_ORD 12

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_SUPPORTS_ORDS \
	13, /* /leds/led_0 */ \
	15, /* /leds/led_1 */ \
	16, /* /leds/led_2 */

/* Existence and alternate IDs: */
#define DT_N_S_leds_EXISTS 1
#define DT_N_INST_0_gpio_leds DT_N_S_leds

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_REG_NUM 0
#define DT_N_S_leds_RANGES_NUM 0
#define DT_N_S_leds_FOREACH_RANGE(fn) 
#define DT_N_S_leds_IRQ_NUM 0
#define DT_N_S_leds_COMPAT_MATCHES_gpio_leds 1
#define DT_N_S_leds_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_P_compatible {"gpio-leds"}
#define DT_N_S_leds_P_compatible_IDX_0 "gpio-leds"
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UNQUOTED gpio-leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_TOKEN gpio_leds
#define DT_N_S_leds_P_compatible_IDX_0_STRING_UPPER_TOKEN GPIO_LEDS
#define DT_N_S_leds_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds, compatible, 0)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds, compatible, 0, __VA_ARGS__)
#define DT_N_S_leds_P_compatible_LEN 1
#define DT_N_S_leds_P_compatible_EXISTS 1

/*
 * Devicetree node: /leds/led_0
 *
 * Node identifier: DT_N_S_leds_S_led_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_0_PATH "/leds/led_0"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_0_FULL_NAME "led_0"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_0_PARENT DT_N_S_leds

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_S_led_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_S_led_0_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_0_ORD 13

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_0_REQUIRES_ORDS \
	8, /* /soc/gpio@0 */ \
	12, /* /leds */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_0_EXISTS 1
#define DT_N_ALIAS_led0        DT_N_S_leds_S_led_0
#define DT_N_NODELABEL_red_led DT_N_S_leds_S_led_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_0_REG_NUM 0
#define DT_N_S_leds_S_led_0_RANGES_NUM 0
#define DT_N_S_leds_S_led_0_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_0_IRQ_NUM 0
#define DT_N_S_leds_S_led_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_0
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin 29
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags 16
#define DT_N_S_leds_S_led_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_0, gpios, 0)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_gpios_LEN 1
#define DT_N_S_leds_S_led_0_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_0_P_label "User LD1"
#define DT_N_S_leds_S_led_0_P_label_STRING_UNQUOTED User LD1
#define DT_N_S_leds_S_led_0_P_label_STRING_TOKEN User_LD1
#define DT_N_S_leds_S_led_0_P_label_STRING_UPPER_TOKEN USER_LD1
#define DT_N_S_leds_S_led_0_P_label_IDX_0 "User LD1"
#define DT_N_S_leds_S_led_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_0, label, 0)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_0, label, 0)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_0, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_0, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_0_P_label_LEN 1
#define DT_N_S_leds_S_led_0_P_label_EXISTS 1

/*
 * Devicetree node: /soc/gpio@1
 *
 * Node identifier: DT_N_S_soc_S_gpio_1
 *
 * Binding (compatible = nxp,lpc-gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/nxp,lpc-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_1_PATH "/soc/gpio@1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_1_FULL_NAME "gpio@1"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_1_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_1_CHILD_IDX 10

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_1_ORD 14

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_1_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_1_SUPPORTS_ORDS \
	15, /* /leds/led_1 */ \
	16, /* /leds/led_2 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_1_EXISTS 1
#define DT_N_ALIAS_gpio_1        DT_N_S_soc_S_gpio_1
#define DT_N_INST_1_nxp_lpc_gpio DT_N_S_soc_S_gpio_1
#define DT_N_NODELABEL_gpio1     DT_N_S_soc_S_gpio_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_1_REG_NUM 1
#define DT_N_S_soc_S_gpio_1_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_1_REG_IDX_0_VAL_ADDRESS 1074315264 /* 0x4008c000 */
#define DT_N_S_soc_S_gpio_1_REG_IDX_0_VAL_SIZE 9352 /* 0x2488 */
#define DT_N_S_soc_S_gpio_1_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_1_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_1_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_1_COMPAT_MATCHES_nxp_lpc_gpio 1
#define DT_N_S_soc_S_gpio_1_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_1_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_gpio_1_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_1_COMPAT_MODEL_IDX_0 "lpc-gpio"
#define DT_N_S_soc_S_gpio_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_1_P_reg {1074315264 /* 0x4008c000 */, 9352 /* 0x2488 */}
#define DT_N_S_soc_S_gpio_1_P_reg_IDX_0 1074315264
#define DT_N_S_soc_S_gpio_1_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_1_P_reg_IDX_1 9352
#define DT_N_S_soc_S_gpio_1_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_1_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_1_P_port 1
#define DT_N_S_soc_S_gpio_1_P_port_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_1_P_port_ENUM_VAL_1_EXISTS 1
#define DT_N_S_soc_S_gpio_1_P_port_EXISTS 1
#define DT_N_S_soc_S_gpio_1_P_int_source "pint"
#define DT_N_S_soc_S_gpio_1_P_int_source_STRING_UNQUOTED pint
#define DT_N_S_soc_S_gpio_1_P_int_source_STRING_TOKEN pint
#define DT_N_S_soc_S_gpio_1_P_int_source_STRING_UPPER_TOKEN PINT
#define DT_N_S_soc_S_gpio_1_P_int_source_IDX_0 "pint"
#define DT_N_S_soc_S_gpio_1_P_int_source_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_1_P_int_source_ENUM_IDX 0
#define DT_N_S_soc_S_gpio_1_P_int_source_ENUM_VAL_pint_EXISTS 1
#define DT_N_S_soc_S_gpio_1_P_int_source_ENUM_TOKEN pint
#define DT_N_S_soc_S_gpio_1_P_int_source_ENUM_UPPER_TOKEN PINT
#define DT_N_S_soc_S_gpio_1_P_int_source_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_1, int_source, 0)
#define DT_N_S_soc_S_gpio_1_P_int_source_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_1, int_source, 0)
#define DT_N_S_soc_S_gpio_1_P_int_source_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_1, int_source, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_1_P_int_source_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_1, int_source, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_1_P_int_source_LEN 1
#define DT_N_S_soc_S_gpio_1_P_int_source_EXISTS 1
#define DT_N_S_soc_S_gpio_1_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_1_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_1_P_ngpios 32
#define DT_N_S_soc_S_gpio_1_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_1_P_compatible {"nxp,lpc-gpio"}
#define DT_N_S_soc_S_gpio_1_P_compatible_IDX_0 "nxp,lpc-gpio"
#define DT_N_S_soc_S_gpio_1_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc-gpio
#define DT_N_S_soc_S_gpio_1_P_compatible_IDX_0_STRING_TOKEN nxp_lpc_gpio
#define DT_N_S_soc_S_gpio_1_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC_GPIO
#define DT_N_S_soc_S_gpio_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_1, compatible, 0)
#define DT_N_S_soc_S_gpio_1_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_1, compatible, 0)
#define DT_N_S_soc_S_gpio_1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_1_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_1_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_1_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_1_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_1_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_1_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_1_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /leds/led_1
 *
 * Node identifier: DT_N_S_leds_S_led_1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_1_PATH "/leds/led_1"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_1_FULL_NAME "led_1"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_1_PARENT DT_N_S_leds

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_S_led_1_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_S_led_1_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_1_ORD 15

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_1_REQUIRES_ORDS \
	12, /* /leds */ \
	14, /* /soc/gpio@1 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_1_EXISTS 1
#define DT_N_ALIAS_led1          DT_N_S_leds_S_led_1
#define DT_N_NODELABEL_green_led DT_N_S_leds_S_led_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_1_REG_NUM 0
#define DT_N_S_leds_S_led_1_RANGES_NUM 0
#define DT_N_S_leds_S_led_1_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_1_IRQ_NUM 0
#define DT_N_S_leds_S_led_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_1
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_pin 10
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_flags 16
#define DT_N_S_leds_S_led_1_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_1_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_1, gpios, 0)
#define DT_N_S_leds_S_led_1_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_1, gpios, 0)
#define DT_N_S_leds_S_led_1_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_1, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_1_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_1, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_1_P_gpios_LEN 1
#define DT_N_S_leds_S_led_1_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_1_P_label "User LD2"
#define DT_N_S_leds_S_led_1_P_label_STRING_UNQUOTED User LD2
#define DT_N_S_leds_S_led_1_P_label_STRING_TOKEN User_LD2
#define DT_N_S_leds_S_led_1_P_label_STRING_UPPER_TOKEN USER_LD2
#define DT_N_S_leds_S_led_1_P_label_IDX_0 "User LD2"
#define DT_N_S_leds_S_led_1_P_label_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_1, label, 0)
#define DT_N_S_leds_S_led_1_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_1, label, 0)
#define DT_N_S_leds_S_led_1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_1, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_1_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_1, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_1_P_label_LEN 1
#define DT_N_S_leds_S_led_1_P_label_EXISTS 1

/*
 * Devicetree node: /leds/led_2
 *
 * Node identifier: DT_N_S_leds_S_led_2
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_leds_S_led_2_PATH "/leds/led_2"

/* Node's name with unit-address: */
#define DT_N_S_leds_S_led_2_FULL_NAME "led_2"

/* Node parent (/leds) identifier: */
#define DT_N_S_leds_S_led_2_PARENT DT_N_S_leds

/* Node's index in its parent's list of children: */
#define DT_N_S_leds_S_led_2_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_leds_S_led_2_FOREACH_CHILD(fn) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_leds_S_led_2_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_leds_S_led_2_ORD 16

/* Ordinals for what this node depends on directly: */
#define DT_N_S_leds_S_led_2_REQUIRES_ORDS \
	12, /* /leds */ \
	14, /* /soc/gpio@1 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_leds_S_led_2_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_leds_S_led_2_EXISTS 1
#define DT_N_ALIAS_led2         DT_N_S_leds_S_led_2
#define DT_N_NODELABEL_blue_led DT_N_S_leds_S_led_2

/* Macros for properties that are special in the specification: */
#define DT_N_S_leds_S_led_2_REG_NUM 0
#define DT_N_S_leds_S_led_2_RANGES_NUM 0
#define DT_N_S_leds_S_led_2_FOREACH_RANGE(fn) 
#define DT_N_S_leds_S_led_2_IRQ_NUM 0
#define DT_N_S_leds_S_led_2_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_leds_S_led_2_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_1
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_pin 9
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_flags 0
#define DT_N_S_leds_S_led_2_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_leds_S_led_2_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_2, gpios, 0)
#define DT_N_S_leds_S_led_2_P_gpios_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_2, gpios, 0)
#define DT_N_S_leds_S_led_2_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_2, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_2_P_gpios_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_2, gpios, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_2_P_gpios_LEN 1
#define DT_N_S_leds_S_led_2_P_gpios_EXISTS 1
#define DT_N_S_leds_S_led_2_P_label "User LD3"
#define DT_N_S_leds_S_led_2_P_label_STRING_UNQUOTED User LD3
#define DT_N_S_leds_S_led_2_P_label_STRING_TOKEN User_LD3
#define DT_N_S_leds_S_led_2_P_label_STRING_UPPER_TOKEN USER_LD3
#define DT_N_S_leds_S_led_2_P_label_IDX_0 "User LD3"
#define DT_N_S_leds_S_led_2_P_label_IDX_0_EXISTS 1
#define DT_N_S_leds_S_led_2_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_leds_S_led_2, label, 0)
#define DT_N_S_leds_S_led_2_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_leds_S_led_2, label, 0)
#define DT_N_S_leds_S_led_2_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_leds_S_led_2, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_2_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_leds_S_led_2, label, 0, __VA_ARGS__)
#define DT_N_S_leds_S_led_2_P_label_LEN 1
#define DT_N_S_leds_S_led_2_P_label_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@e000e100
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_e000e100
 *
 * Binding (compatible = arm,v7m-nvic):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/arm,v7m-nvic.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PATH "/soc/interrupt-controller@e000e100"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_FULL_NAME "interrupt-controller@e000e100"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_ORD 17

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_SUPPORTS_ORDS \
	22, /* /soc/flexcomm@40086000 */ \
	23, /* /soc/flexcomm@40087000 */ \
	24, /* /soc/flexcomm@40088000 */ \
	25, /* /soc/flexcomm@40089000 */ \
	27, /* /soc/flexcomm@4008a000 */ \
	29, /* /soc/flexcomm@40096000 */ \
	30, /* /soc/flexcomm@40097000 */ \
	31, /* /soc/flexcomm@40098000 */ \
	32, /* /soc/mailbox@4008b000 */ \
	37, /* /soc/pint@40004000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_EXISTS 1
#define DT_N_INST_0_arm_v7m_nvic DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_NODELABEL_nvic      DT_N_S_soc_S_interrupt_controller_e000e100

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_NUM 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_ADDRESS 3758153984 /* 0xe000e100 */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_SIZE 3072 /* 0xc00 */
#define DT_N_S_soc_S_interrupt_controller_e000e100_RANGES_NUM 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MATCHES_arm_v7m_nvic 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MODEL_IDX_0 "v7m-nvic"
#define DT_N_S_soc_S_interrupt_controller_e000e100_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg {3758153984 /* 0xe000e100 */, 3072 /* 0xc00 */}
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0 3758153984
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1 3072
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits 3
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible {"arm,v7m-nvic"}
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0 "arm,v7m-nvic"
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_STRING_UNQUOTED arm,v7m-nvic
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_STRING_TOKEN arm_v7m_nvic
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_V7M_NVIC
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/syscon@40000000
 *
 * Node identifier: DT_N_S_soc_S_syscon_40000000
 *
 * Binding (compatible = nxp,lpc-syscon):
 *   $ZEPHYR_BASE/dts/bindings/clock/nxp,lpc-syscon.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_syscon_40000000_PATH "/soc/syscon@40000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_syscon_40000000_FULL_NAME "syscon@40000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_syscon_40000000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_syscon_40000000_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_syscon_40000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_syscon_40000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_syscon_40000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_syscon_40000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_syscon_40000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_syscon_40000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_syscon_40000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_syscon_40000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_syscon_40000000_ORD 18

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_syscon_40000000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_syscon_40000000_SUPPORTS_ORDS \
	22, /* /soc/flexcomm@40086000 */ \
	23, /* /soc/flexcomm@40087000 */ \
	24, /* /soc/flexcomm@40088000 */ \
	25, /* /soc/flexcomm@40089000 */ \
	27, /* /soc/flexcomm@4008a000 */ \
	29, /* /soc/flexcomm@40096000 */ \
	30, /* /soc/flexcomm@40097000 */ \
	31, /* /soc/flexcomm@40098000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_syscon_40000000_EXISTS 1
#define DT_N_INST_0_nxp_lpc_syscon DT_N_S_soc_S_syscon_40000000
#define DT_N_NODELABEL_syscon      DT_N_S_soc_S_syscon_40000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_syscon_40000000_REG_NUM 1
#define DT_N_S_soc_S_syscon_40000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_syscon_40000000_REG_IDX_0_VAL_ADDRESS 1073741824 /* 0x40000000 */
#define DT_N_S_soc_S_syscon_40000000_REG_IDX_0_VAL_SIZE 16384 /* 0x4000 */
#define DT_N_S_soc_S_syscon_40000000_RANGES_NUM 0
#define DT_N_S_soc_S_syscon_40000000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_syscon_40000000_IRQ_NUM 0
#define DT_N_S_soc_S_syscon_40000000_COMPAT_MATCHES_nxp_lpc_syscon 1
#define DT_N_S_soc_S_syscon_40000000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_syscon_40000000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_syscon_40000000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_syscon_40000000_COMPAT_MODEL_IDX_0 "lpc-syscon"
#define DT_N_S_soc_S_syscon_40000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_syscon_40000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_syscon_40000000_P_reg {1073741824 /* 0x40000000 */, 16384 /* 0x4000 */}
#define DT_N_S_soc_S_syscon_40000000_P_reg_IDX_0 1073741824
#define DT_N_S_soc_S_syscon_40000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_syscon_40000000_P_reg_IDX_1 16384
#define DT_N_S_soc_S_syscon_40000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_syscon_40000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_syscon_40000000_P_compatible {"nxp,lpc-syscon"}
#define DT_N_S_soc_S_syscon_40000000_P_compatible_IDX_0 "nxp,lpc-syscon"
#define DT_N_S_soc_S_syscon_40000000_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc-syscon
#define DT_N_S_soc_S_syscon_40000000_P_compatible_IDX_0_STRING_TOKEN nxp_lpc_syscon
#define DT_N_S_soc_S_syscon_40000000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC_SYSCON
#define DT_N_S_soc_S_syscon_40000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_syscon_40000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_syscon_40000000, compatible, 0)
#define DT_N_S_soc_S_syscon_40000000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_syscon_40000000, compatible, 0)
#define DT_N_S_soc_S_syscon_40000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_syscon_40000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_syscon_40000000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_syscon_40000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_syscon_40000000_P_compatible_LEN 1
#define DT_N_S_soc_S_syscon_40000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_syscon_40000000_P_wakeup_source 0
#define DT_N_S_soc_S_syscon_40000000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_syscon_40000000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_syscon_40000000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/iocon@40001000
 *
 * Node identifier: DT_N_S_soc_S_iocon_40001000
 *
 * Binding (compatible = nxp,lpc-iocon):
 *   $ZEPHYR_BASE/dts/bindings/pinctrl/nxp,lpc-iocon.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iocon_40001000_PATH "/soc/iocon@40001000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iocon_40001000_FULL_NAME "iocon@40001000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_iocon_40001000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iocon_40001000_CHILD_IDX 8

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iocon_40001000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl)
#define DT_N_S_soc_S_iocon_40001000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl)
#define DT_N_S_soc_S_iocon_40001000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl)
#define DT_N_S_soc_S_iocon_40001000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl)
#define DT_N_S_soc_S_iocon_40001000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iocon_40001000_ORD 19

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iocon_40001000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iocon_40001000_SUPPORTS_ORDS \
	20, /* /soc/iocon@40001000/pinctrl */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iocon_40001000_EXISTS 1
#define DT_N_INST_0_nxp_lpc_iocon DT_N_S_soc_S_iocon_40001000
#define DT_N_NODELABEL_iocon      DT_N_S_soc_S_iocon_40001000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iocon_40001000_REG_NUM 1
#define DT_N_S_soc_S_iocon_40001000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_REG_IDX_0_VAL_ADDRESS 1073745920 /* 0x40001000 */
#define DT_N_S_soc_S_iocon_40001000_REG_IDX_0_VAL_SIZE 256 /* 0x100 */
#define DT_N_S_soc_S_iocon_40001000_RANGES_NUM 1
#define DT_N_S_soc_S_iocon_40001000_RANGES_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_RANGES_IDX_0_VAL_CHILD_BUS_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_iocon_40001000_RANGES_IDX_0_VAL_PARENT_BUS_ADDRESS 1073745920 /* 0x40001000 */
#define DT_N_S_soc_S_iocon_40001000_RANGES_IDX_0_VAL_LENGTH 256 /* 0x100 */
#define DT_N_S_soc_S_iocon_40001000_FOREACH_RANGE(fn) fn(DT_N_S_soc_S_iocon_40001000, 0)
#define DT_N_S_soc_S_iocon_40001000_IRQ_NUM 0
#define DT_N_S_soc_S_iocon_40001000_COMPAT_MATCHES_nxp_lpc_iocon 1
#define DT_N_S_soc_S_iocon_40001000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_iocon_40001000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_COMPAT_MODEL_IDX_0 "lpc-iocon"
#define DT_N_S_soc_S_iocon_40001000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iocon_40001000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iocon_40001000_P_reg {1073745920 /* 0x40001000 */, 256 /* 0x100 */}
#define DT_N_S_soc_S_iocon_40001000_P_reg_IDX_0 1073745920
#define DT_N_S_soc_S_iocon_40001000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_P_reg_IDX_1 256
#define DT_N_S_soc_S_iocon_40001000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_P_reg_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_P_compatible {"nxp,lpc-iocon"}
#define DT_N_S_soc_S_iocon_40001000_P_compatible_IDX_0 "nxp,lpc-iocon"
#define DT_N_S_soc_S_iocon_40001000_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc-iocon
#define DT_N_S_soc_S_iocon_40001000_P_compatible_IDX_0_STRING_TOKEN nxp_lpc_iocon
#define DT_N_S_soc_S_iocon_40001000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC_IOCON
#define DT_N_S_soc_S_iocon_40001000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iocon_40001000, compatible, 0)
#define DT_N_S_soc_S_iocon_40001000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000, compatible, 0)
#define DT_N_S_soc_S_iocon_40001000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_P_compatible_LEN 1
#define DT_N_S_soc_S_iocon_40001000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_P_wakeup_source 0
#define DT_N_S_soc_S_iocon_40001000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_iocon_40001000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/iocon@40001000/pinctrl
 *
 * Node identifier: DT_N_S_soc_S_iocon_40001000_S_pinctrl
 *
 * Binding (compatible = nxp,lpc-iocon-pinctrl):
 *   $ZEPHYR_BASE/dts/bindings/pinctrl/nxp,lpc-iocon-pinctrl.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_PATH "/soc/iocon@40001000/pinctrl"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_FULL_NAME "pinctrl"

/* Node parent (/soc/iocon@40001000) identifier: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_PARENT DT_N_S_soc_S_iocon_40001000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart, __VA_ARGS__) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c, __VA_ARGS__) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart, __VA_ARGS__) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c, __VA_ARGS__) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_ORD 20

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_REQUIRES_ORDS \
	19, /* /soc/iocon@40001000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_SUPPORTS_ORDS \
	21, /* /soc/iocon@40001000/pinctrl/pinmux_flexcomm0_usart */ \
	26, /* /soc/iocon@40001000/pinctrl/pinmux_flexcomm4_i2c */ \
	28, /* /soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_EXISTS 1
#define DT_N_INST_0_nxp_lpc_iocon_pinctrl DT_N_S_soc_S_iocon_40001000_S_pinctrl
#define DT_N_NODELABEL_pinctrl            DT_N_S_soc_S_iocon_40001000_S_pinctrl

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_REG_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_RANGES_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_IRQ_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_COMPAT_MATCHES_nxp_lpc_iocon_pinctrl 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_COMPAT_MODEL_IDX_0 "lpc-iocon-pinctrl"
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_compatible {"nxp,lpc-iocon-pinctrl"}
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_compatible_IDX_0 "nxp,lpc-iocon-pinctrl"
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc-iocon-pinctrl
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_compatible_IDX_0_STRING_TOKEN nxp_lpc_iocon_pinctrl
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC_IOCON_PINCTRL
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl, compatible, 0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl, compatible, 0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_compatible_LEN 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_compatible_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_wakeup_source 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/iocon@40001000/pinctrl/pinmux_flexcomm0_usart
 *
 * Node identifier: DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_PATH "/soc/iocon@40001000/pinctrl/pinmux_flexcomm0_usart"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_FULL_NAME "pinmux_flexcomm0_usart"

/* Node parent (/soc/iocon@40001000/pinctrl) identifier: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_PARENT DT_N_S_soc_S_iocon_40001000_S_pinctrl

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_ORD 21

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_REQUIRES_ORDS \
	20, /* /soc/iocon@40001000/pinctrl */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_SUPPORTS_ORDS \
	22, /* /soc/flexcomm@40086000 */ \
	45, /* /soc/iocon@40001000/pinctrl/pinmux_flexcomm0_usart/group0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_EXISTS 1
#define DT_N_NODELABEL_pinmux_flexcomm0_usart DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_REG_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_RANGES_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_IRQ_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/flexcomm@40086000
 *
 * Node identifier: DT_N_S_soc_S_flexcomm_40086000
 *
 * Binding (compatible = nxp,lpc-usart):
 *   $ZEPHYR_BASE/dts/bindings/serial/nxp,lpc-usart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexcomm_40086000_PATH "/soc/flexcomm@40086000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexcomm_40086000_FULL_NAME "flexcomm@40086000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flexcomm_40086000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flexcomm_40086000_CHILD_IDX 13

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flexcomm_40086000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexcomm_40086000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_40086000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_40086000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flexcomm_40086000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexcomm_40086000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_40086000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_40086000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexcomm_40086000_ORD 22

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexcomm_40086000_REQUIRES_ORDS \
	7, /* /soc */ \
	17, /* /soc/interrupt-controller@e000e100 */ \
	18, /* /soc/syscon@40000000 */ \
	21, /* /soc/iocon@40001000/pinctrl/pinmux_flexcomm0_usart */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexcomm_40086000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexcomm_40086000_EXISTS 1
#define DT_N_ALIAS_usart_0        DT_N_S_soc_S_flexcomm_40086000
#define DT_N_INST_0_nxp_lpc_usart DT_N_S_soc_S_flexcomm_40086000
#define DT_N_NODELABEL_flexcomm0  DT_N_S_soc_S_flexcomm_40086000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexcomm_40086000_REG_NUM 1
#define DT_N_S_soc_S_flexcomm_40086000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_REG_IDX_0_VAL_ADDRESS 1074290688 /* 0x40086000 */
#define DT_N_S_soc_S_flexcomm_40086000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flexcomm_40086000_RANGES_NUM 0
#define DT_N_S_soc_S_flexcomm_40086000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flexcomm_40086000_IRQ_NUM 1
#define DT_N_S_soc_S_flexcomm_40086000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_flexcomm_40086000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexcomm_40086000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_COMPAT_MATCHES_nxp_lpc_usart 1
#define DT_N_S_soc_S_flexcomm_40086000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_flexcomm_40086000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_COMPAT_MODEL_IDX_0 "lpc-usart"
#define DT_N_S_soc_S_flexcomm_40086000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexcomm_40086000_PINCTRL_NUM 1
#define DT_N_S_soc_S_flexcomm_40086000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_flexcomm_40086000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_flexcomm_40086000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_flexcomm_40086000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart

/* Generic property macros: */
#define DT_N_S_soc_S_flexcomm_40086000_P_current_speed 115200
#define DT_N_S_soc_S_flexcomm_40086000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_hw_flow_control 0
#define DT_N_S_soc_S_flexcomm_40086000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_status "okay"
#define DT_N_S_soc_S_flexcomm_40086000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_flexcomm_40086000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_flexcomm_40086000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flexcomm_40086000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_flexcomm_40086000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_flexcomm_40086000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_flexcomm_40086000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flexcomm_40086000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40086000, status, 0)
#define DT_N_S_soc_S_flexcomm_40086000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40086000, status, 0)
#define DT_N_S_soc_S_flexcomm_40086000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40086000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40086000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40086000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40086000_P_status_LEN 1
#define DT_N_S_soc_S_flexcomm_40086000_P_status_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_compatible {"nxp,lpc-usart"}
#define DT_N_S_soc_S_flexcomm_40086000_P_compatible_IDX_0 "nxp,lpc-usart"
#define DT_N_S_soc_S_flexcomm_40086000_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc-usart
#define DT_N_S_soc_S_flexcomm_40086000_P_compatible_IDX_0_STRING_TOKEN nxp_lpc_usart
#define DT_N_S_soc_S_flexcomm_40086000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC_USART
#define DT_N_S_soc_S_flexcomm_40086000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40086000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_40086000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40086000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_40086000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40086000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40086000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40086000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40086000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexcomm_40086000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_reg {1074290688 /* 0x40086000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flexcomm_40086000_P_reg_IDX_0 1074290688
#define DT_N_S_soc_S_flexcomm_40086000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flexcomm_40086000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_interrupts {14 /* 0xe */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexcomm_40086000_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_flexcomm_40086000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexcomm_40086000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_clocks_IDX_0_PH DT_N_S_soc_S_syscon_40000000
#define DT_N_S_soc_S_flexcomm_40086000_P_clocks_IDX_0_VAL_name 0
#define DT_N_S_soc_S_flexcomm_40086000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40086000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_40086000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40086000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_40086000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40086000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40086000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40086000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40086000_P_clocks_LEN 1
#define DT_N_S_soc_S_flexcomm_40086000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_wakeup_source 0
#define DT_N_S_soc_S_flexcomm_40086000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flexcomm_40086000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_0_IDX_0 DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_0_IDX_0_PH DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40086000, pinctrl_0, 0)
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40086000, pinctrl_0, 0)
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40086000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40086000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40086000, pinctrl_names, 0)
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40086000, pinctrl_names, 0)
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40086000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40086000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_flexcomm_40086000_P_pinctrl_names_EXISTS 1

/*
 * Devicetree node: /soc/flexcomm@40087000
 *
 * Node identifier: DT_N_S_soc_S_flexcomm_40087000
 *
 * Binding (compatible = nxp,lpc-flexcomm):
 *   $ZEPHYR_BASE/dts/bindings/arm/nxp,lpc-flexcomm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexcomm_40087000_PATH "/soc/flexcomm@40087000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexcomm_40087000_FULL_NAME "flexcomm@40087000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flexcomm_40087000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flexcomm_40087000_CHILD_IDX 14

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flexcomm_40087000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexcomm_40087000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_40087000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_40087000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flexcomm_40087000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexcomm_40087000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_40087000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_40087000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexcomm_40087000_ORD 23

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexcomm_40087000_REQUIRES_ORDS \
	7, /* /soc */ \
	17, /* /soc/interrupt-controller@e000e100 */ \
	18, /* /soc/syscon@40000000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexcomm_40087000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexcomm_40087000_EXISTS 1
#define DT_N_INST_0_nxp_lpc_flexcomm DT_N_S_soc_S_flexcomm_40087000
#define DT_N_NODELABEL_flexcomm1     DT_N_S_soc_S_flexcomm_40087000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexcomm_40087000_REG_NUM 1
#define DT_N_S_soc_S_flexcomm_40087000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_REG_IDX_0_VAL_ADDRESS 1074294784 /* 0x40087000 */
#define DT_N_S_soc_S_flexcomm_40087000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flexcomm_40087000_RANGES_NUM 0
#define DT_N_S_soc_S_flexcomm_40087000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flexcomm_40087000_IRQ_NUM 1
#define DT_N_S_soc_S_flexcomm_40087000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_IRQ_IDX_0_VAL_irq 15
#define DT_N_S_soc_S_flexcomm_40087000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexcomm_40087000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_COMPAT_MATCHES_nxp_lpc_flexcomm 1
#define DT_N_S_soc_S_flexcomm_40087000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_flexcomm_40087000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_COMPAT_MODEL_IDX_0 "lpc-flexcomm"
#define DT_N_S_soc_S_flexcomm_40087000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexcomm_40087000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexcomm_40087000_P_reg {1074294784 /* 0x40087000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flexcomm_40087000_P_reg_IDX_0 1074294784
#define DT_N_S_soc_S_flexcomm_40087000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flexcomm_40087000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_interrupts {15 /* 0xf */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexcomm_40087000_P_interrupts_IDX_0 15
#define DT_N_S_soc_S_flexcomm_40087000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexcomm_40087000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_status "disabled"
#define DT_N_S_soc_S_flexcomm_40087000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_flexcomm_40087000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexcomm_40087000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexcomm_40087000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_flexcomm_40087000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexcomm_40087000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexcomm_40087000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexcomm_40087000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40087000, status, 0)
#define DT_N_S_soc_S_flexcomm_40087000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40087000, status, 0)
#define DT_N_S_soc_S_flexcomm_40087000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40087000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40087000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40087000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40087000_P_status_LEN 1
#define DT_N_S_soc_S_flexcomm_40087000_P_status_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_compatible {"nxp,lpc-flexcomm"}
#define DT_N_S_soc_S_flexcomm_40087000_P_compatible_IDX_0 "nxp,lpc-flexcomm"
#define DT_N_S_soc_S_flexcomm_40087000_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc-flexcomm
#define DT_N_S_soc_S_flexcomm_40087000_P_compatible_IDX_0_STRING_TOKEN nxp_lpc_flexcomm
#define DT_N_S_soc_S_flexcomm_40087000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC_FLEXCOMM
#define DT_N_S_soc_S_flexcomm_40087000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40087000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_40087000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40087000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_40087000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40087000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40087000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40087000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40087000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexcomm_40087000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_clocks_IDX_0_PH DT_N_S_soc_S_syscon_40000000
#define DT_N_S_soc_S_flexcomm_40087000_P_clocks_IDX_0_VAL_name 1
#define DT_N_S_soc_S_flexcomm_40087000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40087000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_40087000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40087000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_40087000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40087000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40087000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40087000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40087000_P_clocks_LEN 1
#define DT_N_S_soc_S_flexcomm_40087000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_wakeup_source 0
#define DT_N_S_soc_S_flexcomm_40087000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40087000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flexcomm_40087000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/flexcomm@40088000
 *
 * Node identifier: DT_N_S_soc_S_flexcomm_40088000
 *
 * Binding (compatible = nxp,lpc-flexcomm):
 *   $ZEPHYR_BASE/dts/bindings/arm/nxp,lpc-flexcomm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexcomm_40088000_PATH "/soc/flexcomm@40088000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexcomm_40088000_FULL_NAME "flexcomm@40088000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flexcomm_40088000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flexcomm_40088000_CHILD_IDX 15

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flexcomm_40088000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexcomm_40088000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_40088000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_40088000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flexcomm_40088000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexcomm_40088000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_40088000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_40088000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexcomm_40088000_ORD 24

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexcomm_40088000_REQUIRES_ORDS \
	7, /* /soc */ \
	17, /* /soc/interrupt-controller@e000e100 */ \
	18, /* /soc/syscon@40000000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexcomm_40088000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexcomm_40088000_EXISTS 1
#define DT_N_INST_1_nxp_lpc_flexcomm DT_N_S_soc_S_flexcomm_40088000
#define DT_N_NODELABEL_flexcomm2     DT_N_S_soc_S_flexcomm_40088000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexcomm_40088000_REG_NUM 1
#define DT_N_S_soc_S_flexcomm_40088000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_REG_IDX_0_VAL_ADDRESS 1074298880 /* 0x40088000 */
#define DT_N_S_soc_S_flexcomm_40088000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flexcomm_40088000_RANGES_NUM 0
#define DT_N_S_soc_S_flexcomm_40088000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flexcomm_40088000_IRQ_NUM 1
#define DT_N_S_soc_S_flexcomm_40088000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_IRQ_IDX_0_VAL_irq 16
#define DT_N_S_soc_S_flexcomm_40088000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexcomm_40088000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_COMPAT_MATCHES_nxp_lpc_flexcomm 1
#define DT_N_S_soc_S_flexcomm_40088000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_flexcomm_40088000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_COMPAT_MODEL_IDX_0 "lpc-flexcomm"
#define DT_N_S_soc_S_flexcomm_40088000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexcomm_40088000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexcomm_40088000_P_reg {1074298880 /* 0x40088000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flexcomm_40088000_P_reg_IDX_0 1074298880
#define DT_N_S_soc_S_flexcomm_40088000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flexcomm_40088000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_interrupts {16 /* 0x10 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexcomm_40088000_P_interrupts_IDX_0 16
#define DT_N_S_soc_S_flexcomm_40088000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexcomm_40088000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_status "disabled"
#define DT_N_S_soc_S_flexcomm_40088000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_flexcomm_40088000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexcomm_40088000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexcomm_40088000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_flexcomm_40088000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexcomm_40088000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexcomm_40088000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexcomm_40088000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40088000, status, 0)
#define DT_N_S_soc_S_flexcomm_40088000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40088000, status, 0)
#define DT_N_S_soc_S_flexcomm_40088000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40088000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40088000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40088000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40088000_P_status_LEN 1
#define DT_N_S_soc_S_flexcomm_40088000_P_status_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_compatible {"nxp,lpc-flexcomm"}
#define DT_N_S_soc_S_flexcomm_40088000_P_compatible_IDX_0 "nxp,lpc-flexcomm"
#define DT_N_S_soc_S_flexcomm_40088000_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc-flexcomm
#define DT_N_S_soc_S_flexcomm_40088000_P_compatible_IDX_0_STRING_TOKEN nxp_lpc_flexcomm
#define DT_N_S_soc_S_flexcomm_40088000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC_FLEXCOMM
#define DT_N_S_soc_S_flexcomm_40088000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40088000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_40088000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40088000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_40088000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40088000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40088000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40088000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40088000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexcomm_40088000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_clocks_IDX_0_PH DT_N_S_soc_S_syscon_40000000
#define DT_N_S_soc_S_flexcomm_40088000_P_clocks_IDX_0_VAL_name 2
#define DT_N_S_soc_S_flexcomm_40088000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40088000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_40088000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40088000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_40088000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40088000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40088000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40088000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40088000_P_clocks_LEN 1
#define DT_N_S_soc_S_flexcomm_40088000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_wakeup_source 0
#define DT_N_S_soc_S_flexcomm_40088000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40088000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flexcomm_40088000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/flexcomm@40089000
 *
 * Node identifier: DT_N_S_soc_S_flexcomm_40089000
 *
 * Binding (compatible = nxp,lpc-flexcomm):
 *   $ZEPHYR_BASE/dts/bindings/arm/nxp,lpc-flexcomm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexcomm_40089000_PATH "/soc/flexcomm@40089000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexcomm_40089000_FULL_NAME "flexcomm@40089000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flexcomm_40089000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flexcomm_40089000_CHILD_IDX 16

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flexcomm_40089000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexcomm_40089000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_40089000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_40089000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flexcomm_40089000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexcomm_40089000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_40089000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_40089000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexcomm_40089000_ORD 25

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexcomm_40089000_REQUIRES_ORDS \
	7, /* /soc */ \
	17, /* /soc/interrupt-controller@e000e100 */ \
	18, /* /soc/syscon@40000000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexcomm_40089000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexcomm_40089000_EXISTS 1
#define DT_N_INST_2_nxp_lpc_flexcomm DT_N_S_soc_S_flexcomm_40089000
#define DT_N_NODELABEL_flexcomm3     DT_N_S_soc_S_flexcomm_40089000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexcomm_40089000_REG_NUM 1
#define DT_N_S_soc_S_flexcomm_40089000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_REG_IDX_0_VAL_ADDRESS 1074302976 /* 0x40089000 */
#define DT_N_S_soc_S_flexcomm_40089000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flexcomm_40089000_RANGES_NUM 0
#define DT_N_S_soc_S_flexcomm_40089000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flexcomm_40089000_IRQ_NUM 1
#define DT_N_S_soc_S_flexcomm_40089000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_IRQ_IDX_0_VAL_irq 17
#define DT_N_S_soc_S_flexcomm_40089000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexcomm_40089000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_COMPAT_MATCHES_nxp_lpc_flexcomm 1
#define DT_N_S_soc_S_flexcomm_40089000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_flexcomm_40089000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_COMPAT_MODEL_IDX_0 "lpc-flexcomm"
#define DT_N_S_soc_S_flexcomm_40089000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexcomm_40089000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexcomm_40089000_P_reg {1074302976 /* 0x40089000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flexcomm_40089000_P_reg_IDX_0 1074302976
#define DT_N_S_soc_S_flexcomm_40089000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flexcomm_40089000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_interrupts {17 /* 0x11 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexcomm_40089000_P_interrupts_IDX_0 17
#define DT_N_S_soc_S_flexcomm_40089000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexcomm_40089000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_status "disabled"
#define DT_N_S_soc_S_flexcomm_40089000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_flexcomm_40089000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexcomm_40089000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexcomm_40089000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_flexcomm_40089000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexcomm_40089000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexcomm_40089000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexcomm_40089000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40089000, status, 0)
#define DT_N_S_soc_S_flexcomm_40089000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40089000, status, 0)
#define DT_N_S_soc_S_flexcomm_40089000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40089000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40089000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40089000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40089000_P_status_LEN 1
#define DT_N_S_soc_S_flexcomm_40089000_P_status_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_compatible {"nxp,lpc-flexcomm"}
#define DT_N_S_soc_S_flexcomm_40089000_P_compatible_IDX_0 "nxp,lpc-flexcomm"
#define DT_N_S_soc_S_flexcomm_40089000_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc-flexcomm
#define DT_N_S_soc_S_flexcomm_40089000_P_compatible_IDX_0_STRING_TOKEN nxp_lpc_flexcomm
#define DT_N_S_soc_S_flexcomm_40089000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC_FLEXCOMM
#define DT_N_S_soc_S_flexcomm_40089000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40089000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_40089000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40089000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_40089000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40089000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40089000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40089000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40089000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexcomm_40089000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_clocks_IDX_0_PH DT_N_S_soc_S_syscon_40000000
#define DT_N_S_soc_S_flexcomm_40089000_P_clocks_IDX_0_VAL_name 3
#define DT_N_S_soc_S_flexcomm_40089000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40089000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_40089000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40089000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_40089000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40089000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40089000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40089000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40089000_P_clocks_LEN 1
#define DT_N_S_soc_S_flexcomm_40089000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_wakeup_source 0
#define DT_N_S_soc_S_flexcomm_40089000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40089000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flexcomm_40089000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/iocon@40001000/pinctrl/pinmux_flexcomm4_i2c
 *
 * Node identifier: DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_PATH "/soc/iocon@40001000/pinctrl/pinmux_flexcomm4_i2c"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_FULL_NAME "pinmux_flexcomm4_i2c"

/* Node parent (/soc/iocon@40001000/pinctrl) identifier: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_PARENT DT_N_S_soc_S_iocon_40001000_S_pinctrl

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_ORD 26

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_REQUIRES_ORDS \
	20, /* /soc/iocon@40001000/pinctrl */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_SUPPORTS_ORDS \
	27, /* /soc/flexcomm@4008a000 */ \
	46, /* /soc/iocon@40001000/pinctrl/pinmux_flexcomm4_i2c/group0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_EXISTS 1
#define DT_N_NODELABEL_pinmux_flexcomm4_i2c DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_REG_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_RANGES_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_IRQ_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/flexcomm@4008a000
 *
 * Node identifier: DT_N_S_soc_S_flexcomm_4008a000
 *
 * Binding (compatible = nxp,lpc-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/nxp,lpc-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexcomm_4008a000_PATH "/soc/flexcomm@4008a000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexcomm_4008a000_FULL_NAME "flexcomm@4008a000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flexcomm_4008a000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flexcomm_4008a000_CHILD_IDX 17

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flexcomm_4008a000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexcomm_4008a000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_4008a000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_4008a000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flexcomm_4008a000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexcomm_4008a000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_4008a000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_4008a000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexcomm_4008a000_ORD 27

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexcomm_4008a000_REQUIRES_ORDS \
	7, /* /soc */ \
	17, /* /soc/interrupt-controller@e000e100 */ \
	18, /* /soc/syscon@40000000 */ \
	26, /* /soc/iocon@40001000/pinctrl/pinmux_flexcomm4_i2c */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexcomm_4008a000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexcomm_4008a000_EXISTS 1
#define DT_N_INST_0_nxp_lpc_i2c    DT_N_S_soc_S_flexcomm_4008a000
#define DT_N_NODELABEL_flexcomm4   DT_N_S_soc_S_flexcomm_4008a000
#define DT_N_NODELABEL_arduino_i2c DT_N_S_soc_S_flexcomm_4008a000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexcomm_4008a000_REG_NUM 1
#define DT_N_S_soc_S_flexcomm_4008a000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_REG_IDX_0_VAL_ADDRESS 1074307072 /* 0x4008a000 */
#define DT_N_S_soc_S_flexcomm_4008a000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flexcomm_4008a000_RANGES_NUM 0
#define DT_N_S_soc_S_flexcomm_4008a000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flexcomm_4008a000_IRQ_NUM 1
#define DT_N_S_soc_S_flexcomm_4008a000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_IRQ_IDX_0_VAL_irq 18
#define DT_N_S_soc_S_flexcomm_4008a000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexcomm_4008a000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_COMPAT_MATCHES_nxp_lpc_i2c 1
#define DT_N_S_soc_S_flexcomm_4008a000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_flexcomm_4008a000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_COMPAT_MODEL_IDX_0 "lpc-i2c"
#define DT_N_S_soc_S_flexcomm_4008a000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexcomm_4008a000_PINCTRL_NUM 1
#define DT_N_S_soc_S_flexcomm_4008a000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_flexcomm_4008a000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_flexcomm_4008a000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_flexcomm_4008a000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c

/* Generic property macros: */
#define DT_N_S_soc_S_flexcomm_4008a000_P_clock_frequency 100000
#define DT_N_S_soc_S_flexcomm_4008a000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_status "okay"
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_4008a000, status, 0)
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_4008a000, status, 0)
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_4008a000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_4008a000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_LEN 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_status_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_compatible {"nxp,lpc-i2c"}
#define DT_N_S_soc_S_flexcomm_4008a000_P_compatible_IDX_0 "nxp,lpc-i2c"
#define DT_N_S_soc_S_flexcomm_4008a000_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc-i2c
#define DT_N_S_soc_S_flexcomm_4008a000_P_compatible_IDX_0_STRING_TOKEN nxp_lpc_i2c
#define DT_N_S_soc_S_flexcomm_4008a000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC_I2C
#define DT_N_S_soc_S_flexcomm_4008a000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_4008a000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_4008a000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_4008a000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_4008a000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_4008a000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_4008a000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_4008a000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_4008a000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_reg {1074307072 /* 0x4008a000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flexcomm_4008a000_P_reg_IDX_0 1074307072
#define DT_N_S_soc_S_flexcomm_4008a000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flexcomm_4008a000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_interrupts {18 /* 0x12 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexcomm_4008a000_P_interrupts_IDX_0 18
#define DT_N_S_soc_S_flexcomm_4008a000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexcomm_4008a000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_clocks_IDX_0_PH DT_N_S_soc_S_syscon_40000000
#define DT_N_S_soc_S_flexcomm_4008a000_P_clocks_IDX_0_VAL_name 4
#define DT_N_S_soc_S_flexcomm_4008a000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_4008a000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_4008a000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_4008a000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_4008a000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_4008a000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_4008a000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_4008a000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_4008a000_P_clocks_LEN 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_wakeup_source 0
#define DT_N_S_soc_S_flexcomm_4008a000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flexcomm_4008a000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_0_IDX_0 DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_0_IDX_0_PH DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_4008a000, pinctrl_0, 0)
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_4008a000, pinctrl_0, 0)
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_4008a000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_4008a000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_4008a000, pinctrl_names, 0)
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_4008a000, pinctrl_names, 0)
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_4008a000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_4008a000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_flexcomm_4008a000_P_pinctrl_names_EXISTS 1

/*
 * Devicetree node: /soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi
 *
 * Node identifier: DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_PATH "/soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_FULL_NAME "pinmux_flexcomm5_spi"

/* Node parent (/soc/iocon@40001000/pinctrl) identifier: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_PARENT DT_N_S_soc_S_iocon_40001000_S_pinctrl

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0, __VA_ARGS__) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0, __VA_ARGS__) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_ORD 28

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_REQUIRES_ORDS \
	20, /* /soc/iocon@40001000/pinctrl */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_SUPPORTS_ORDS \
	29, /* /soc/flexcomm@40096000 */ \
	47, /* /soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi/group0 */ \
	48, /* /soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi/group1 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_EXISTS 1
#define DT_N_NODELABEL_pinmux_flexcomm5_spi DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_REG_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_RANGES_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_IRQ_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/flexcomm@40096000
 *
 * Node identifier: DT_N_S_soc_S_flexcomm_40096000
 *
 * Binding (compatible = nxp,lpc-spi):
 *   $ZEPHYR_BASE/dts/bindings/spi/nxp,lpc-spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexcomm_40096000_PATH "/soc/flexcomm@40096000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexcomm_40096000_FULL_NAME "flexcomm@40096000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flexcomm_40096000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flexcomm_40096000_CHILD_IDX 18

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flexcomm_40096000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexcomm_40096000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_40096000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_40096000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flexcomm_40096000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexcomm_40096000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_40096000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_40096000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexcomm_40096000_ORD 29

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexcomm_40096000_REQUIRES_ORDS \
	7, /* /soc */ \
	17, /* /soc/interrupt-controller@e000e100 */ \
	18, /* /soc/syscon@40000000 */ \
	28, /* /soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexcomm_40096000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexcomm_40096000_EXISTS 1
#define DT_N_ALIAS_spi_5           DT_N_S_soc_S_flexcomm_40096000
#define DT_N_INST_0_nxp_lpc_spi    DT_N_S_soc_S_flexcomm_40096000
#define DT_N_NODELABEL_flexcomm5   DT_N_S_soc_S_flexcomm_40096000
#define DT_N_NODELABEL_arduino_spi DT_N_S_soc_S_flexcomm_40096000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexcomm_40096000_REG_NUM 1
#define DT_N_S_soc_S_flexcomm_40096000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_REG_IDX_0_VAL_ADDRESS 1074356224 /* 0x40096000 */
#define DT_N_S_soc_S_flexcomm_40096000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flexcomm_40096000_RANGES_NUM 0
#define DT_N_S_soc_S_flexcomm_40096000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flexcomm_40096000_IRQ_NUM 1
#define DT_N_S_soc_S_flexcomm_40096000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_IRQ_IDX_0_VAL_irq 19
#define DT_N_S_soc_S_flexcomm_40096000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexcomm_40096000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_COMPAT_MATCHES_nxp_lpc_spi 1
#define DT_N_S_soc_S_flexcomm_40096000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_flexcomm_40096000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_COMPAT_MODEL_IDX_0 "lpc-spi"
#define DT_N_S_soc_S_flexcomm_40096000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexcomm_40096000_PINCTRL_NUM 1
#define DT_N_S_soc_S_flexcomm_40096000_PINCTRL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_PINCTRL_IDX_0_TOKEN default
#define DT_N_S_soc_S_flexcomm_40096000_PINCTRL_IDX_0_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_flexcomm_40096000_PINCTRL_NAME_default_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_PINCTRL_NAME_default_IDX 0
#define DT_N_S_soc_S_flexcomm_40096000_PINCTRL_NAME_default_IDX_0_PH DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi

/* Generic property macros: */
#define DT_N_S_soc_S_flexcomm_40096000_P_status "okay"
#define DT_N_S_soc_S_flexcomm_40096000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_flexcomm_40096000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_flexcomm_40096000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flexcomm_40096000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_flexcomm_40096000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_flexcomm_40096000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_flexcomm_40096000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flexcomm_40096000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40096000, status, 0)
#define DT_N_S_soc_S_flexcomm_40096000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40096000, status, 0)
#define DT_N_S_soc_S_flexcomm_40096000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40096000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40096000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40096000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40096000_P_status_LEN 1
#define DT_N_S_soc_S_flexcomm_40096000_P_status_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_compatible {"nxp,lpc-spi"}
#define DT_N_S_soc_S_flexcomm_40096000_P_compatible_IDX_0 "nxp,lpc-spi"
#define DT_N_S_soc_S_flexcomm_40096000_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc-spi
#define DT_N_S_soc_S_flexcomm_40096000_P_compatible_IDX_0_STRING_TOKEN nxp_lpc_spi
#define DT_N_S_soc_S_flexcomm_40096000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC_SPI
#define DT_N_S_soc_S_flexcomm_40096000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40096000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_40096000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40096000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_40096000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40096000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40096000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40096000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40096000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexcomm_40096000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_reg {1074356224 /* 0x40096000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flexcomm_40096000_P_reg_IDX_0 1074356224
#define DT_N_S_soc_S_flexcomm_40096000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flexcomm_40096000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_interrupts {19 /* 0x13 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexcomm_40096000_P_interrupts_IDX_0 19
#define DT_N_S_soc_S_flexcomm_40096000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexcomm_40096000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_clocks_IDX_0_PH DT_N_S_soc_S_syscon_40000000
#define DT_N_S_soc_S_flexcomm_40096000_P_clocks_IDX_0_VAL_name 5
#define DT_N_S_soc_S_flexcomm_40096000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40096000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_40096000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40096000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_40096000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40096000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40096000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40096000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40096000_P_clocks_LEN 1
#define DT_N_S_soc_S_flexcomm_40096000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_wakeup_source 0
#define DT_N_S_soc_S_flexcomm_40096000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flexcomm_40096000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_0_IDX_0 DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_0_IDX_0_PH DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_0_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_0_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40096000, pinctrl_0, 0)
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40096000, pinctrl_0, 0)
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_0_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40096000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_0_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40096000, pinctrl_0, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_0_LEN 1
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_names {"default"}
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_names_IDX_0 "default"
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_names_IDX_0_STRING_UNQUOTED default
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_names_IDX_0_STRING_TOKEN default
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_names_IDX_0_STRING_UPPER_TOKEN DEFAULT
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40096000, pinctrl_names, 0)
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40096000, pinctrl_names, 0)
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40096000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40096000, pinctrl_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_names_LEN 1
#define DT_N_S_soc_S_flexcomm_40096000_P_pinctrl_names_EXISTS 1

/*
 * Devicetree node: /soc/flexcomm@40097000
 *
 * Node identifier: DT_N_S_soc_S_flexcomm_40097000
 *
 * Binding (compatible = nxp,lpc-flexcomm):
 *   $ZEPHYR_BASE/dts/bindings/arm/nxp,lpc-flexcomm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexcomm_40097000_PATH "/soc/flexcomm@40097000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexcomm_40097000_FULL_NAME "flexcomm@40097000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flexcomm_40097000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flexcomm_40097000_CHILD_IDX 19

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flexcomm_40097000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexcomm_40097000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_40097000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_40097000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flexcomm_40097000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexcomm_40097000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_40097000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_40097000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexcomm_40097000_ORD 30

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexcomm_40097000_REQUIRES_ORDS \
	7, /* /soc */ \
	17, /* /soc/interrupt-controller@e000e100 */ \
	18, /* /soc/syscon@40000000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexcomm_40097000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexcomm_40097000_EXISTS 1
#define DT_N_INST_3_nxp_lpc_flexcomm DT_N_S_soc_S_flexcomm_40097000
#define DT_N_NODELABEL_flexcomm6     DT_N_S_soc_S_flexcomm_40097000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexcomm_40097000_REG_NUM 1
#define DT_N_S_soc_S_flexcomm_40097000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_REG_IDX_0_VAL_ADDRESS 1074360320 /* 0x40097000 */
#define DT_N_S_soc_S_flexcomm_40097000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flexcomm_40097000_RANGES_NUM 0
#define DT_N_S_soc_S_flexcomm_40097000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flexcomm_40097000_IRQ_NUM 1
#define DT_N_S_soc_S_flexcomm_40097000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_IRQ_IDX_0_VAL_irq 20
#define DT_N_S_soc_S_flexcomm_40097000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexcomm_40097000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_COMPAT_MATCHES_nxp_lpc_flexcomm 1
#define DT_N_S_soc_S_flexcomm_40097000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_flexcomm_40097000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_COMPAT_MODEL_IDX_0 "lpc-flexcomm"
#define DT_N_S_soc_S_flexcomm_40097000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexcomm_40097000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexcomm_40097000_P_reg {1074360320 /* 0x40097000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flexcomm_40097000_P_reg_IDX_0 1074360320
#define DT_N_S_soc_S_flexcomm_40097000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flexcomm_40097000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_interrupts {20 /* 0x14 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexcomm_40097000_P_interrupts_IDX_0 20
#define DT_N_S_soc_S_flexcomm_40097000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexcomm_40097000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_status "disabled"
#define DT_N_S_soc_S_flexcomm_40097000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_flexcomm_40097000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexcomm_40097000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexcomm_40097000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_flexcomm_40097000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexcomm_40097000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexcomm_40097000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexcomm_40097000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40097000, status, 0)
#define DT_N_S_soc_S_flexcomm_40097000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40097000, status, 0)
#define DT_N_S_soc_S_flexcomm_40097000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40097000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40097000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40097000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40097000_P_status_LEN 1
#define DT_N_S_soc_S_flexcomm_40097000_P_status_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_compatible {"nxp,lpc-flexcomm"}
#define DT_N_S_soc_S_flexcomm_40097000_P_compatible_IDX_0 "nxp,lpc-flexcomm"
#define DT_N_S_soc_S_flexcomm_40097000_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc-flexcomm
#define DT_N_S_soc_S_flexcomm_40097000_P_compatible_IDX_0_STRING_TOKEN nxp_lpc_flexcomm
#define DT_N_S_soc_S_flexcomm_40097000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC_FLEXCOMM
#define DT_N_S_soc_S_flexcomm_40097000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40097000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_40097000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40097000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_40097000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40097000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40097000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40097000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40097000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexcomm_40097000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_clocks_IDX_0_PH DT_N_S_soc_S_syscon_40000000
#define DT_N_S_soc_S_flexcomm_40097000_P_clocks_IDX_0_VAL_name 6
#define DT_N_S_soc_S_flexcomm_40097000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40097000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_40097000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40097000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_40097000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40097000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40097000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40097000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40097000_P_clocks_LEN 1
#define DT_N_S_soc_S_flexcomm_40097000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_wakeup_source 0
#define DT_N_S_soc_S_flexcomm_40097000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40097000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flexcomm_40097000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/flexcomm@40098000
 *
 * Node identifier: DT_N_S_soc_S_flexcomm_40098000
 *
 * Binding (compatible = nxp,lpc-flexcomm):
 *   $ZEPHYR_BASE/dts/bindings/arm/nxp,lpc-flexcomm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flexcomm_40098000_PATH "/soc/flexcomm@40098000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flexcomm_40098000_FULL_NAME "flexcomm@40098000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flexcomm_40098000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flexcomm_40098000_CHILD_IDX 20

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flexcomm_40098000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flexcomm_40098000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_40098000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_40098000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flexcomm_40098000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flexcomm_40098000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flexcomm_40098000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flexcomm_40098000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flexcomm_40098000_ORD 31

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flexcomm_40098000_REQUIRES_ORDS \
	7, /* /soc */ \
	17, /* /soc/interrupt-controller@e000e100 */ \
	18, /* /soc/syscon@40000000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flexcomm_40098000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flexcomm_40098000_EXISTS 1
#define DT_N_INST_4_nxp_lpc_flexcomm DT_N_S_soc_S_flexcomm_40098000
#define DT_N_NODELABEL_flexcomm7     DT_N_S_soc_S_flexcomm_40098000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flexcomm_40098000_REG_NUM 1
#define DT_N_S_soc_S_flexcomm_40098000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_REG_IDX_0_VAL_ADDRESS 1074364416 /* 0x40098000 */
#define DT_N_S_soc_S_flexcomm_40098000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flexcomm_40098000_RANGES_NUM 0
#define DT_N_S_soc_S_flexcomm_40098000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flexcomm_40098000_IRQ_NUM 1
#define DT_N_S_soc_S_flexcomm_40098000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_IRQ_IDX_0_VAL_irq 21
#define DT_N_S_soc_S_flexcomm_40098000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_flexcomm_40098000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_COMPAT_MATCHES_nxp_lpc_flexcomm 1
#define DT_N_S_soc_S_flexcomm_40098000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_flexcomm_40098000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_COMPAT_MODEL_IDX_0 "lpc-flexcomm"
#define DT_N_S_soc_S_flexcomm_40098000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flexcomm_40098000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flexcomm_40098000_P_reg {1074364416 /* 0x40098000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flexcomm_40098000_P_reg_IDX_0 1074364416
#define DT_N_S_soc_S_flexcomm_40098000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flexcomm_40098000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_interrupts {21 /* 0x15 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_flexcomm_40098000_P_interrupts_IDX_0 21
#define DT_N_S_soc_S_flexcomm_40098000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_flexcomm_40098000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_status "disabled"
#define DT_N_S_soc_S_flexcomm_40098000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_flexcomm_40098000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_flexcomm_40098000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexcomm_40098000_P_status_IDX_0 "disabled"
#define DT_N_S_soc_S_flexcomm_40098000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_flexcomm_40098000_P_status_ENUM_VAL_disabled_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_flexcomm_40098000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_flexcomm_40098000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40098000, status, 0)
#define DT_N_S_soc_S_flexcomm_40098000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40098000, status, 0)
#define DT_N_S_soc_S_flexcomm_40098000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40098000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40098000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40098000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40098000_P_status_LEN 1
#define DT_N_S_soc_S_flexcomm_40098000_P_status_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_compatible {"nxp,lpc-flexcomm"}
#define DT_N_S_soc_S_flexcomm_40098000_P_compatible_IDX_0 "nxp,lpc-flexcomm"
#define DT_N_S_soc_S_flexcomm_40098000_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc-flexcomm
#define DT_N_S_soc_S_flexcomm_40098000_P_compatible_IDX_0_STRING_TOKEN nxp_lpc_flexcomm
#define DT_N_S_soc_S_flexcomm_40098000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC_FLEXCOMM
#define DT_N_S_soc_S_flexcomm_40098000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40098000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_40098000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40098000, compatible, 0)
#define DT_N_S_soc_S_flexcomm_40098000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40098000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40098000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40098000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40098000_P_compatible_LEN 1
#define DT_N_S_soc_S_flexcomm_40098000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_clocks_IDX_0_PH DT_N_S_soc_S_syscon_40000000
#define DT_N_S_soc_S_flexcomm_40098000_P_clocks_IDX_0_VAL_name 7
#define DT_N_S_soc_S_flexcomm_40098000_P_clocks_IDX_0_VAL_name_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flexcomm_40098000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_40098000_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flexcomm_40098000, clocks, 0)
#define DT_N_S_soc_S_flexcomm_40098000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flexcomm_40098000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40098000_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flexcomm_40098000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flexcomm_40098000_P_clocks_LEN 1
#define DT_N_S_soc_S_flexcomm_40098000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_wakeup_source 0
#define DT_N_S_soc_S_flexcomm_40098000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flexcomm_40098000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flexcomm_40098000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/mailbox@4008b000
 *
 * Node identifier: DT_N_S_soc_S_mailbox_4008b000
 *
 * Binding (compatible = nxp,lpc-mailbox):
 *   $ZEPHYR_BASE/dts/bindings/ipm/nxp,lpc-mailbox.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_mailbox_4008b000_PATH "/soc/mailbox@4008b000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_mailbox_4008b000_FULL_NAME "mailbox@4008b000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_mailbox_4008b000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_mailbox_4008b000_CHILD_IDX 12

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_mailbox_4008b000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_mailbox_4008b000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_mailbox_4008b000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_mailbox_4008b000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_mailbox_4008b000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_mailbox_4008b000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_mailbox_4008b000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_mailbox_4008b000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_mailbox_4008b000_ORD 32

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_mailbox_4008b000_REQUIRES_ORDS \
	7, /* /soc */ \
	17, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_mailbox_4008b000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_mailbox_4008b000_EXISTS 1
#define DT_N_ALIAS_mailbox_0        DT_N_S_soc_S_mailbox_4008b000
#define DT_N_INST_0_nxp_lpc_mailbox DT_N_S_soc_S_mailbox_4008b000
#define DT_N_NODELABEL_mailbox0     DT_N_S_soc_S_mailbox_4008b000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_mailbox_4008b000_REG_NUM 1
#define DT_N_S_soc_S_mailbox_4008b000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_REG_IDX_0_VAL_ADDRESS 1074311168 /* 0x4008b000 */
#define DT_N_S_soc_S_mailbox_4008b000_REG_IDX_0_VAL_SIZE 236 /* 0xec */
#define DT_N_S_soc_S_mailbox_4008b000_RANGES_NUM 0
#define DT_N_S_soc_S_mailbox_4008b000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_mailbox_4008b000_IRQ_NUM 1
#define DT_N_S_soc_S_mailbox_4008b000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_IRQ_IDX_0_VAL_irq 31
#define DT_N_S_soc_S_mailbox_4008b000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_mailbox_4008b000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_COMPAT_MATCHES_nxp_lpc_mailbox 1
#define DT_N_S_soc_S_mailbox_4008b000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_mailbox_4008b000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_COMPAT_MODEL_IDX_0 "lpc-mailbox"
#define DT_N_S_soc_S_mailbox_4008b000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_mailbox_4008b000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_mailbox_4008b000_P_reg {1074311168 /* 0x4008b000 */, 236 /* 0xec */}
#define DT_N_S_soc_S_mailbox_4008b000_P_reg_IDX_0 1074311168
#define DT_N_S_soc_S_mailbox_4008b000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_P_reg_IDX_1 236
#define DT_N_S_soc_S_mailbox_4008b000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_P_reg_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_P_interrupts {31 /* 0x1f */, 0 /* 0x0 */}
#define DT_N_S_soc_S_mailbox_4008b000_P_interrupts_IDX_0 31
#define DT_N_S_soc_S_mailbox_4008b000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_mailbox_4008b000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_P_status "okay"
#define DT_N_S_soc_S_mailbox_4008b000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_mailbox_4008b000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_mailbox_4008b000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_mailbox_4008b000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_mailbox_4008b000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_mailbox_4008b000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_mailbox_4008b000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_mailbox_4008b000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_mailbox_4008b000, status, 0)
#define DT_N_S_soc_S_mailbox_4008b000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_mailbox_4008b000, status, 0)
#define DT_N_S_soc_S_mailbox_4008b000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_mailbox_4008b000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mailbox_4008b000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_mailbox_4008b000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mailbox_4008b000_P_status_LEN 1
#define DT_N_S_soc_S_mailbox_4008b000_P_status_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_P_compatible {"nxp,lpc-mailbox"}
#define DT_N_S_soc_S_mailbox_4008b000_P_compatible_IDX_0 "nxp,lpc-mailbox"
#define DT_N_S_soc_S_mailbox_4008b000_P_compatible_IDX_0_STRING_UNQUOTED nxp,lpc-mailbox
#define DT_N_S_soc_S_mailbox_4008b000_P_compatible_IDX_0_STRING_TOKEN nxp_lpc_mailbox
#define DT_N_S_soc_S_mailbox_4008b000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_LPC_MAILBOX
#define DT_N_S_soc_S_mailbox_4008b000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_mailbox_4008b000, compatible, 0)
#define DT_N_S_soc_S_mailbox_4008b000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_mailbox_4008b000, compatible, 0)
#define DT_N_S_soc_S_mailbox_4008b000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_mailbox_4008b000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mailbox_4008b000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_mailbox_4008b000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_mailbox_4008b000_P_compatible_LEN 1
#define DT_N_S_soc_S_mailbox_4008b000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_P_wakeup_source 0
#define DT_N_S_soc_S_mailbox_4008b000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_mailbox_4008b000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_mailbox_4008b000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/memory@04000000
 *
 * Node identifier: DT_N_S_soc_S_memory_04000000
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_04000000_PATH "/soc/memory@04000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_04000000_FULL_NAME "memory@04000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_04000000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_memory_04000000_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_memory_04000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_04000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_04000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_04000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_memory_04000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_memory_04000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_04000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_04000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_04000000_ORD 33

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_04000000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_04000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_04000000_EXISTS 1
#define DT_N_INST_3_mmio_sram DT_N_S_soc_S_memory_04000000
#define DT_N_NODELABEL_sramx  DT_N_S_soc_S_memory_04000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_memory_04000000_REG_NUM 1
#define DT_N_S_soc_S_memory_04000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_04000000_REG_IDX_0_VAL_ADDRESS 67108864 /* 0x4000000 */
#define DT_N_S_soc_S_memory_04000000_REG_IDX_0_VAL_SIZE 32768 /* 0x8000 */
#define DT_N_S_soc_S_memory_04000000_RANGES_NUM 0
#define DT_N_S_soc_S_memory_04000000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_memory_04000000_IRQ_NUM 0
#define DT_N_S_soc_S_memory_04000000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_04000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_memory_04000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_memory_04000000_P_reg {67108864 /* 0x4000000 */, 32768 /* 0x8000 */}
#define DT_N_S_soc_S_memory_04000000_P_reg_IDX_0 67108864
#define DT_N_S_soc_S_memory_04000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_04000000_P_reg_IDX_1 32768
#define DT_N_S_soc_S_memory_04000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_04000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_04000000_P_compatible {"mmio-sram"}
#define DT_N_S_soc_S_memory_04000000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_soc_S_memory_04000000_P_compatible_IDX_0_STRING_UNQUOTED mmio-sram
#define DT_N_S_soc_S_memory_04000000_P_compatible_IDX_0_STRING_TOKEN mmio_sram
#define DT_N_S_soc_S_memory_04000000_P_compatible_IDX_0_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_soc_S_memory_04000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_04000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_04000000, compatible, 0)
#define DT_N_S_soc_S_memory_04000000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_04000000, compatible, 0)
#define DT_N_S_soc_S_memory_04000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_04000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_04000000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_04000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_04000000_P_compatible_LEN 1
#define DT_N_S_soc_S_memory_04000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_memory_04000000_P_wakeup_source 0
#define DT_N_S_soc_S_memory_04000000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_memory_04000000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_memory_04000000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/memory@20000000
 *
 * Node identifier: DT_N_S_soc_S_memory_20000000
 *
 * Binding (compatible = mmio-sram):
 *   $ZEPHYR_BASE/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_20000000_PATH "/soc/memory@20000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_20000000_FULL_NAME "memory@20000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_20000000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_memory_20000000_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_20000000_ORD 34

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_20000000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_20000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_20000000_EXISTS 1
#define DT_N_INST_0_mmio_sram DT_N_S_soc_S_memory_20000000
#define DT_N_NODELABEL_sram0  DT_N_S_soc_S_memory_20000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_memory_20000000_REG_NUM 1
#define DT_N_S_soc_S_memory_20000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20000000_REG_IDX_0_VAL_ADDRESS 536870912 /* 0x20000000 */
#define DT_N_S_soc_S_memory_20000000_REG_IDX_0_VAL_SIZE 131072 /* 0x20000 */
#define DT_N_S_soc_S_memory_20000000_RANGES_NUM 0
#define DT_N_S_soc_S_memory_20000000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_memory_20000000_IRQ_NUM 0
#define DT_N_S_soc_S_memory_20000000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_20000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_memory_20000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_memory_20000000_P_reg {536870912 /* 0x20000000 */, 131072 /* 0x20000 */}
#define DT_N_S_soc_S_memory_20000000_P_reg_IDX_0 536870912
#define DT_N_S_soc_S_memory_20000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20000000_P_reg_IDX_1 131072
#define DT_N_S_soc_S_memory_20000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_20000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_20000000_P_compatible {"mmio-sram"}
#define DT_N_S_soc_S_memory_20000000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_soc_S_memory_20000000_P_compatible_IDX_0_STRING_UNQUOTED mmio-sram
#define DT_N_S_soc_S_memory_20000000_P_compatible_IDX_0_STRING_TOKEN mmio_sram
#define DT_N_S_soc_S_memory_20000000_P_compatible_IDX_0_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_soc_S_memory_20000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_20000000, compatible, 0)
#define DT_N_S_soc_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_20000000, compatible, 0)
#define DT_N_S_soc_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_20000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_20000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_20000000_P_compatible_LEN 1
#define DT_N_S_soc_S_memory_20000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_memory_20000000_P_wakeup_source 0
#define DT_N_S_soc_S_memory_20000000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_memory_20000000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_memory_20000000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/memory@20010000
 *
 * Node identifier: DT_N_S_soc_S_memory_20010000
 *
 * Binding (compatible = zephyr,memory-region):
 *   $ZEPHYR_BASE/dts/bindings/base/zephyr,memory-region.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_20010000_PATH "/soc/memory@20010000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_20010000_FULL_NAME "memory@20010000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_20010000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_memory_20010000_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_memory_20010000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_20010000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_20010000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_20010000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_memory_20010000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_memory_20010000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_20010000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_20010000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_20010000_ORD 35

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_20010000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_20010000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_20010000_EXISTS 1
#define DT_N_INST_0_zephyr_memory_region DT_N_S_soc_S_memory_20010000
#define DT_N_INST_1_mmio_sram            DT_N_S_soc_S_memory_20010000
#define DT_N_NODELABEL_sram1             DT_N_S_soc_S_memory_20010000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_memory_20010000_REG_NUM 1
#define DT_N_S_soc_S_memory_20010000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20010000_REG_IDX_0_VAL_ADDRESS 536936448 /* 0x20010000 */
#define DT_N_S_soc_S_memory_20010000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_memory_20010000_RANGES_NUM 0
#define DT_N_S_soc_S_memory_20010000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_memory_20010000_IRQ_NUM 0
#define DT_N_S_soc_S_memory_20010000_COMPAT_MATCHES_zephyr_memory_region 1
#define DT_N_S_soc_S_memory_20010000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20010000_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_soc_S_memory_20010000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20010000_COMPAT_MODEL_IDX_0 "memory-region"
#define DT_N_S_soc_S_memory_20010000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_20010000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_memory_20010000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_memory_20010000_P_zephyr_memory_region "SRAM1"
#define DT_N_S_soc_S_memory_20010000_P_zephyr_memory_region_STRING_UNQUOTED SRAM1
#define DT_N_S_soc_S_memory_20010000_P_zephyr_memory_region_STRING_TOKEN SRAM1
#define DT_N_S_soc_S_memory_20010000_P_zephyr_memory_region_STRING_UPPER_TOKEN SRAM1
#define DT_N_S_soc_S_memory_20010000_P_zephyr_memory_region_IDX_0 "SRAM1"
#define DT_N_S_soc_S_memory_20010000_P_zephyr_memory_region_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20010000_P_zephyr_memory_region_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_20010000, zephyr_memory_region, 0)
#define DT_N_S_soc_S_memory_20010000_P_zephyr_memory_region_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_20010000, zephyr_memory_region, 0)
#define DT_N_S_soc_S_memory_20010000_P_zephyr_memory_region_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_20010000, zephyr_memory_region, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_20010000_P_zephyr_memory_region_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_20010000, zephyr_memory_region, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_20010000_P_zephyr_memory_region_LEN 1
#define DT_N_S_soc_S_memory_20010000_P_zephyr_memory_region_EXISTS 1
#define DT_N_S_soc_S_memory_20010000_P_compatible {"zephyr,memory-region", "mmio-sram"}
#define DT_N_S_soc_S_memory_20010000_P_compatible_IDX_0 "zephyr,memory-region"
#define DT_N_S_soc_S_memory_20010000_P_compatible_IDX_0_STRING_UNQUOTED zephyr,memory-region
#define DT_N_S_soc_S_memory_20010000_P_compatible_IDX_0_STRING_TOKEN zephyr_memory_region
#define DT_N_S_soc_S_memory_20010000_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_MEMORY_REGION
#define DT_N_S_soc_S_memory_20010000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20010000_P_compatible_IDX_1 "mmio-sram"
#define DT_N_S_soc_S_memory_20010000_P_compatible_IDX_1_STRING_UNQUOTED mmio-sram
#define DT_N_S_soc_S_memory_20010000_P_compatible_IDX_1_STRING_TOKEN mmio_sram
#define DT_N_S_soc_S_memory_20010000_P_compatible_IDX_1_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_soc_S_memory_20010000_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_20010000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_20010000, compatible, 0) \
	fn(DT_N_S_soc_S_memory_20010000, compatible, 1)
#define DT_N_S_soc_S_memory_20010000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_20010000, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_memory_20010000, compatible, 1)
#define DT_N_S_soc_S_memory_20010000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_20010000, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_memory_20010000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_20010000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_20010000, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_memory_20010000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_20010000_P_compatible_LEN 2
#define DT_N_S_soc_S_memory_20010000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_memory_20010000_P_reg {536936448 /* 0x20010000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_memory_20010000_P_reg_IDX_0 536936448
#define DT_N_S_soc_S_memory_20010000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20010000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_memory_20010000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_20010000_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_20010000_P_wakeup_source 0
#define DT_N_S_soc_S_memory_20010000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_memory_20010000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_memory_20010000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/memory@20020000
 *
 * Node identifier: DT_N_S_soc_S_memory_20020000
 *
 * Binding (compatible = zephyr,memory-region):
 *   $ZEPHYR_BASE/dts/bindings/base/zephyr,memory-region.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_memory_20020000_PATH "/soc/memory@20020000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_memory_20020000_FULL_NAME "memory@20020000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_memory_20020000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_memory_20020000_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_memory_20020000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_memory_20020000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_20020000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_20020000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_memory_20020000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_memory_20020000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_memory_20020000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_memory_20020000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_memory_20020000_ORD 36

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_memory_20020000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_memory_20020000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_memory_20020000_EXISTS 1
#define DT_N_INST_1_zephyr_memory_region DT_N_S_soc_S_memory_20020000
#define DT_N_INST_2_mmio_sram            DT_N_S_soc_S_memory_20020000
#define DT_N_NODELABEL_sram2             DT_N_S_soc_S_memory_20020000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_memory_20020000_REG_NUM 1
#define DT_N_S_soc_S_memory_20020000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20020000_REG_IDX_0_VAL_ADDRESS 537001984 /* 0x20020000 */
#define DT_N_S_soc_S_memory_20020000_REG_IDX_0_VAL_SIZE 32768 /* 0x8000 */
#define DT_N_S_soc_S_memory_20020000_RANGES_NUM 0
#define DT_N_S_soc_S_memory_20020000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_memory_20020000_IRQ_NUM 0
#define DT_N_S_soc_S_memory_20020000_COMPAT_MATCHES_zephyr_memory_region 1
#define DT_N_S_soc_S_memory_20020000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20020000_COMPAT_VENDOR_IDX_0 "Zephyr-specific binding"
#define DT_N_S_soc_S_memory_20020000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20020000_COMPAT_MODEL_IDX_0 "memory-region"
#define DT_N_S_soc_S_memory_20020000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_soc_S_memory_20020000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_memory_20020000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_memory_20020000_P_zephyr_memory_region "SRAM2"
#define DT_N_S_soc_S_memory_20020000_P_zephyr_memory_region_STRING_UNQUOTED SRAM2
#define DT_N_S_soc_S_memory_20020000_P_zephyr_memory_region_STRING_TOKEN SRAM2
#define DT_N_S_soc_S_memory_20020000_P_zephyr_memory_region_STRING_UPPER_TOKEN SRAM2
#define DT_N_S_soc_S_memory_20020000_P_zephyr_memory_region_IDX_0 "SRAM2"
#define DT_N_S_soc_S_memory_20020000_P_zephyr_memory_region_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20020000_P_zephyr_memory_region_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_20020000, zephyr_memory_region, 0)
#define DT_N_S_soc_S_memory_20020000_P_zephyr_memory_region_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_20020000, zephyr_memory_region, 0)
#define DT_N_S_soc_S_memory_20020000_P_zephyr_memory_region_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_20020000, zephyr_memory_region, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_20020000_P_zephyr_memory_region_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_20020000, zephyr_memory_region, 0, __VA_ARGS__)
#define DT_N_S_soc_S_memory_20020000_P_zephyr_memory_region_LEN 1
#define DT_N_S_soc_S_memory_20020000_P_zephyr_memory_region_EXISTS 1
#define DT_N_S_soc_S_memory_20020000_P_compatible {"zephyr,memory-region", "mmio-sram"}
#define DT_N_S_soc_S_memory_20020000_P_compatible_IDX_0 "zephyr,memory-region"
#define DT_N_S_soc_S_memory_20020000_P_compatible_IDX_0_STRING_UNQUOTED zephyr,memory-region
#define DT_N_S_soc_S_memory_20020000_P_compatible_IDX_0_STRING_TOKEN zephyr_memory_region
#define DT_N_S_soc_S_memory_20020000_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_MEMORY_REGION
#define DT_N_S_soc_S_memory_20020000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20020000_P_compatible_IDX_1 "mmio-sram"
#define DT_N_S_soc_S_memory_20020000_P_compatible_IDX_1_STRING_UNQUOTED mmio-sram
#define DT_N_S_soc_S_memory_20020000_P_compatible_IDX_1_STRING_TOKEN mmio_sram
#define DT_N_S_soc_S_memory_20020000_P_compatible_IDX_1_STRING_UPPER_TOKEN MMIO_SRAM
#define DT_N_S_soc_S_memory_20020000_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_20020000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_memory_20020000, compatible, 0) \
	fn(DT_N_S_soc_S_memory_20020000, compatible, 1)
#define DT_N_S_soc_S_memory_20020000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_memory_20020000, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_memory_20020000, compatible, 1)
#define DT_N_S_soc_S_memory_20020000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_memory_20020000, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_memory_20020000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_20020000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_memory_20020000, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_memory_20020000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_memory_20020000_P_compatible_LEN 2
#define DT_N_S_soc_S_memory_20020000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_memory_20020000_P_reg {537001984 /* 0x20020000 */, 32768 /* 0x8000 */}
#define DT_N_S_soc_S_memory_20020000_P_reg_IDX_0 537001984
#define DT_N_S_soc_S_memory_20020000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_memory_20020000_P_reg_IDX_1 32768
#define DT_N_S_soc_S_memory_20020000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_memory_20020000_P_reg_EXISTS 1
#define DT_N_S_soc_S_memory_20020000_P_wakeup_source 0
#define DT_N_S_soc_S_memory_20020000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_memory_20020000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_memory_20020000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/pint@40004000
 *
 * Node identifier: DT_N_S_soc_S_pint_40004000
 *
 * Binding (compatible = nxp,pint):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/nxp,pint.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pint_40004000_PATH "/soc/pint@40004000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pint_40004000_FULL_NAME "pint@40004000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_pint_40004000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pint_40004000_CHILD_IDX 11

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pint_40004000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pint_40004000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_pint_40004000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pint_40004000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_pint_40004000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pint_40004000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_pint_40004000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_pint_40004000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pint_40004000_ORD 37

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pint_40004000_REQUIRES_ORDS \
	7, /* /soc */ \
	17, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pint_40004000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pint_40004000_EXISTS 1
#define DT_N_INST_0_nxp_pint DT_N_S_soc_S_pint_40004000
#define DT_N_NODELABEL_pint  DT_N_S_soc_S_pint_40004000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pint_40004000_REG_NUM 1
#define DT_N_S_soc_S_pint_40004000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_REG_IDX_0_VAL_ADDRESS 1073758208 /* 0x40004000 */
#define DT_N_S_soc_S_pint_40004000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_pint_40004000_RANGES_NUM 0
#define DT_N_S_soc_S_pint_40004000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pint_40004000_IRQ_NUM 8
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_0_VAL_irq 4
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_0_VAL_priority 2
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_1_VAL_irq 5
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_1_VAL_priority 2
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_1_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_2_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_2_VAL_irq 6
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_2_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_2_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_2_VAL_priority 2
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_2_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_3_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_3_VAL_irq 7
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_3_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_3_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_3_VAL_priority 2
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_3_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_4_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_4_VAL_irq 32
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_4_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_4_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_4_VAL_priority 2
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_4_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_5_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_5_VAL_irq 33
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_5_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_5_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_5_VAL_priority 2
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_5_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_6_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_6_VAL_irq 34
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_6_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_6_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_6_VAL_priority 2
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_6_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_7_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_7_VAL_irq 35
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_7_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_7_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_7_VAL_priority 2
#define DT_N_S_soc_S_pint_40004000_IRQ_IDX_7_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_COMPAT_MATCHES_nxp_pint 1
#define DT_N_S_soc_S_pint_40004000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_pint_40004000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_COMPAT_MODEL_IDX_0 "pint"
#define DT_N_S_soc_S_pint_40004000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pint_40004000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pint_40004000_P_reg {1073758208 /* 0x40004000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_pint_40004000_P_reg_IDX_0 1073758208
#define DT_N_S_soc_S_pint_40004000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_pint_40004000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_reg_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts {4 /* 0x4 */, 2 /* 0x2 */, 5 /* 0x5 */, 2 /* 0x2 */, 6 /* 0x6 */, 2 /* 0x2 */, 7 /* 0x7 */, 2 /* 0x2 */, 32 /* 0x20 */, 2 /* 0x2 */, 33 /* 0x21 */, 2 /* 0x2 */, 34 /* 0x22 */, 2 /* 0x2 */, 35 /* 0x23 */, 2 /* 0x2 */}
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_0 4
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_1 2
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_2 5
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_3 2
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_3_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_4 6
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_4_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_5 2
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_5_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_6 7
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_6_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_7 2
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_7_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_8 32
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_8_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_9 2
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_9_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_10 33
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_10_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_11 2
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_11_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_12 34
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_12_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_13 2
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_13_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_14 35
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_14_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_15 2
#define DT_N_S_soc_S_pint_40004000_P_interrupts_IDX_15_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_num_lines 8
#define DT_N_S_soc_S_pint_40004000_P_num_lines_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_num_inputs 64
#define DT_N_S_soc_S_pint_40004000_P_num_inputs_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_compatible {"nxp,pint"}
#define DT_N_S_soc_S_pint_40004000_P_compatible_IDX_0 "nxp,pint"
#define DT_N_S_soc_S_pint_40004000_P_compatible_IDX_0_STRING_UNQUOTED nxp,pint
#define DT_N_S_soc_S_pint_40004000_P_compatible_IDX_0_STRING_TOKEN nxp_pint
#define DT_N_S_soc_S_pint_40004000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_PINT
#define DT_N_S_soc_S_pint_40004000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pint_40004000, compatible, 0)
#define DT_N_S_soc_S_pint_40004000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pint_40004000, compatible, 0)
#define DT_N_S_soc_S_pint_40004000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pint_40004000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pint_40004000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pint_40004000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pint_40004000_P_compatible_LEN 1
#define DT_N_S_soc_S_pint_40004000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_wakeup_source 0
#define DT_N_S_soc_S_pint_40004000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_pint_40004000_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_soc_S_pint_40004000_P_interrupt_controller 1
#define DT_N_S_soc_S_pint_40004000_P_interrupt_controller_EXISTS 1

/*
 * Devicetree node: /soc/timer@e000e010
 *
 * Node identifier: DT_N_S_soc_S_timer_e000e010
 *
 * Binding (compatible = arm,armv7m-systick):
 *   $ZEPHYR_BASE/dts/bindings/timer/arm,armv7m-systick.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_timer_e000e010_PATH "/soc/timer@e000e010"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_timer_e000e010_FULL_NAME "timer@e000e010"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_timer_e000e010_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_timer_e000e010_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_timer_e000e010_ORD 38

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_timer_e000e010_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_timer_e000e010_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_timer_e000e010_EXISTS 1
#define DT_N_INST_0_arm_armv7m_systick DT_N_S_soc_S_timer_e000e010
#define DT_N_NODELABEL_systick         DT_N_S_soc_S_timer_e000e010

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_timer_e000e010_REG_NUM 1
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_ADDRESS 3758153744 /* 0xe000e010 */
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_SIZE 16 /* 0x10 */
#define DT_N_S_soc_S_timer_e000e010_RANGES_NUM 0
#define DT_N_S_soc_S_timer_e000e010_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_timer_e000e010_IRQ_NUM 0
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MATCHES_arm_armv7m_systick 1
#define DT_N_S_soc_S_timer_e000e010_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_COMPAT_VENDOR_IDX_0 "ARM Ltd."
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MODEL_IDX_0 "armv7m-systick"
#define DT_N_S_soc_S_timer_e000e010_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_timer_e000e010_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_timer_e000e010_P_reg {3758153744 /* 0xe000e010 */, 16 /* 0x10 */}
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0 3758153744
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1 16
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible {"arm,armv7m-systick"}
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0 "arm,armv7m-systick"
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_STRING_UNQUOTED arm,armv7m-systick
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_STRING_TOKEN arm_armv7m_systick
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_STRING_UPPER_TOKEN ARM_ARMV7M_SYSTICK
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_LEN 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_wakeup_source 0
#define DT_N_S_soc_S_timer_e000e010_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_timer_e000e010_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@4009c000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_4009c000
 *
 * Binding (compatible = nxp,iap-fmc54):
 *   $ZEPHYR_BASE/dts/bindings/flash_controller/nxp,iap-fmc54.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_4009c000_PATH "/soc/flash-controller@4009c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_4009c000_FULL_NAME "flash-controller@4009c000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flash_controller_4009c000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_4009c000_CHILD_IDX 7

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_4009c000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_4009c000_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_4009c000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_4009c000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_4009c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_4009c000_ORD 39

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_4009c000_REQUIRES_ORDS \
	7, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_4009c000_SUPPORTS_ORDS \
	40, /* /soc/flash-controller@4009c000/flash@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_4009c000_EXISTS 1
#define DT_N_INST_0_nxp_iap_fmc54 DT_N_S_soc_S_flash_controller_4009c000
#define DT_N_NODELABEL_iap        DT_N_S_soc_S_flash_controller_4009c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_4009c000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_4009c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_REG_IDX_0_VAL_ADDRESS 1074380800 /* 0x4009c000 */
#define DT_N_S_soc_S_flash_controller_4009c000_REG_IDX_0_VAL_SIZE 24 /* 0x18 */
#define DT_N_S_soc_S_flash_controller_4009c000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_4009c000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_4009c000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_4009c000_COMPAT_MATCHES_nxp_iap_fmc54 1
#define DT_N_S_soc_S_flash_controller_4009c000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_COMPAT_VENDOR_IDX_0 "NXP Semiconductors"
#define DT_N_S_soc_S_flash_controller_4009c000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_COMPAT_MODEL_IDX_0 "iap-fmc54"
#define DT_N_S_soc_S_flash_controller_4009c000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_4009c000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_4009c000_P_reg {1074380800 /* 0x4009c000 */, 24 /* 0x18 */}
#define DT_N_S_soc_S_flash_controller_4009c000_P_reg_IDX_0 1074380800
#define DT_N_S_soc_S_flash_controller_4009c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_P_reg_IDX_1 24
#define DT_N_S_soc_S_flash_controller_4009c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_P_status "okay"
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_4009c000, status, 0)
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_4009c000, status, 0)
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_4009c000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_LEN 1
#define DT_N_S_soc_S_flash_controller_4009c000_P_status_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_P_compatible {"nxp,iap-fmc54"}
#define DT_N_S_soc_S_flash_controller_4009c000_P_compatible_IDX_0 "nxp,iap-fmc54"
#define DT_N_S_soc_S_flash_controller_4009c000_P_compatible_IDX_0_STRING_UNQUOTED nxp,iap-fmc54
#define DT_N_S_soc_S_flash_controller_4009c000_P_compatible_IDX_0_STRING_TOKEN nxp_iap_fmc54
#define DT_N_S_soc_S_flash_controller_4009c000_P_compatible_IDX_0_STRING_UPPER_TOKEN NXP_IAP_FMC54
#define DT_N_S_soc_S_flash_controller_4009c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_4009c000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_4009c000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_4009c000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_4009c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_4009c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_4009c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_4009c000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flash_controller_4009c000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@4009c000/flash@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_4009c000_S_flash_0
 *
 * Binding (compatible = soc-nv-flash):
 *   $ZEPHYR_BASE/dts/bindings/mtd/soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_PATH "/soc/flash-controller@4009c000/flash@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_FULL_NAME "flash@0"

/* Node parent (/soc/flash-controller@4009c000) identifier: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_PARENT DT_N_S_soc_S_flash_controller_4009c000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_ORD 40

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_REQUIRES_ORDS \
	39, /* /soc/flash-controller@4009c000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_SUPPORTS_ORDS \
	41, /* /soc/flash-controller@4009c000/flash@0/partitions */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_EXISTS 1
#define DT_N_INST_0_soc_nv_flash DT_N_S_soc_S_flash_controller_4009c000_S_flash_0
#define DT_N_NODELABEL_flash0    DT_N_S_soc_S_flash_controller_4009c000_S_flash_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_REG_IDX_0_VAL_SIZE 262144 /* 0x40000 */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_erase_block_size 256
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_erase_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_write_block_size 256
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_write_block_size_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_compatible {"soc-nv-flash"}
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_compatible_IDX_0_STRING_UNQUOTED soc-nv-flash
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_compatible_IDX_0_STRING_TOKEN soc_nv_flash
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_compatible_IDX_0_STRING_UPPER_TOKEN SOC_NV_FLASH
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_reg {0 /* 0x0 */, 262144 /* 0x40000 */}
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_reg_IDX_1 262144
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@4009c000/flash@0/partitions
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions
 *
 * Binding (compatible = fixed-partitions):
 *   $ZEPHYR_BASE/dts/bindings/mtd/fixed-partitions.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_PATH "/soc/flash-controller@4009c000/flash@0/partitions"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_FULL_NAME "partitions"

/* Node parent (/soc/flash-controller@4009c000/flash@0) identifier: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_PARENT DT_N_S_soc_S_flash_controller_4009c000_S_flash_0

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_ORD 41

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_REQUIRES_ORDS \
	40, /* /soc/flash-controller@4009c000/flash@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_SUPPORTS_ORDS \
	42, /* /soc/flash-controller@4009c000/flash@0/partitions/partition@0 */ \
	43, /* /soc/flash-controller@4009c000/flash@0/partitions/partition@10000 */ \
	44, /* /soc/flash-controller@4009c000/flash@0/partitions/partition@30000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_EXISTS 1
#define DT_N_INST_0_fixed_partitions DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_REG_NUM 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_COMPAT_MATCHES_fixed_partitions 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/flash-controller@4009c000/flash@0/partitions/partition@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_PATH "/soc/flash-controller@4009c000/flash@0/partitions/partition@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_FULL_NAME "partition@0"

/* Node parent (/soc/flash-controller@4009c000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_PARENT DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_ORD 42

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_REQUIRES_ORDS \
	41, /* /soc/flash-controller@4009c000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_EXISTS 1
#define DT_N_NODELABEL_slot0_partition DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_REG_IDX_0_VAL_SIZE 200704 /* 0x31000 */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_PARTITION_ID 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_label "image-0"
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_label_STRING_UNQUOTED image-0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_label_STRING_TOKEN image_0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_label_STRING_UPPER_TOKEN IMAGE_0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_label_IDX_0 "image-0"
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0, label, 0)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0, label, 0)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_read_only 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_reg {0 /* 0x0 */, 200704 /* 0x31000 */}
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1 200704
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@4009c000/flash@0/partitions/partition@10000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_PATH "/soc/flash-controller@4009c000/flash@0/partitions/partition@10000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_FULL_NAME "partition@10000"

/* Node parent (/soc/flash-controller@4009c000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_PARENT DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_ORD 43

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_REQUIRES_ORDS \
	41, /* /soc/flash-controller@4009c000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_EXISTS 1
#define DT_N_NODELABEL_slot1_partition DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_REG_IDX_0_VAL_ADDRESS 65536 /* 0x10000 */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_PARTITION_ID 1

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_label "image-1"
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_label_STRING_UNQUOTED image-1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_label_STRING_TOKEN image_1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_label_STRING_UPPER_TOKEN IMAGE_1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_label_IDX_0 "image-1"
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000, label, 0)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000, label, 0)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_reg {65536 /* 0x10000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_0 65536
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@4009c000/flash@0/partitions/partition@30000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_PATH "/soc/flash-controller@4009c000/flash@0/partitions/partition@30000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_FULL_NAME "partition@30000"

/* Node parent (/soc/flash-controller@4009c000/flash@0/partitions) identifier: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_PARENT DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_ORD 44

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_REQUIRES_ORDS \
	41, /* /soc/flash-controller@4009c000/flash@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_EXISTS 1
#define DT_N_NODELABEL_storage_partition DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_REG_IDX_0_VAL_ADDRESS 196608 /* 0x30000 */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_PARTITION_ID 2

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_label "storage"
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_label_STRING_UNQUOTED storage
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_label_STRING_TOKEN storage
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_label_STRING_UPPER_TOKEN STORAGE
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_label_IDX_0 "storage"
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_label_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000, label, 0)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000, label, 0)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000, label, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_label_LEN 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_read_only 0
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_read_only_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_reg {196608 /* 0x30000 */, 65536 /* 0x10000 */}
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_reg_IDX_0 196608
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_reg_IDX_1 65536
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/iocon@40001000/pinctrl/pinmux_flexcomm0_usart/group0
 *
 * Node identifier: DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_PATH "/soc/iocon@40001000/pinctrl/pinmux_flexcomm0_usart/group0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_FULL_NAME "group0"

/* Node parent (/soc/iocon@40001000/pinctrl/pinmux_flexcomm0_usart) identifier: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_PARENT DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_ORD 45

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_REQUIRES_ORDS \
	21, /* /soc/iocon@40001000/pinctrl/pinmux_flexcomm0_usart */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_REG_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_RANGES_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_IRQ_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_pinmux {1 /* 0x1 */, 1048577 /* 0x100001 */}
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_pinmux_IDX_0 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_pinmux_IDX_1 1048577
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, pinmux, 0) \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, pinmux, 1)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, pinmux, 1)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, pinmux, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, pinmux, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_pinmux_LEN 2
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate "standard"
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_STRING_UNQUOTED standard
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_STRING_TOKEN standard
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_STRING_UPPER_TOKEN STANDARD
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_IDX_0 "standard"
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_ENUM_VAL_standard_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_ENUM_TOKEN standard
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_ENUM_UPPER_TOKEN STANDARD
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, slew_rate, 0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, slew_rate, 0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, slew_rate, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0, slew_rate, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_LEN 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_nxp_invert 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_nxp_invert_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_nxp_analog_mode 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_nxp_analog_mode_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_nxp_analog_alt_mode 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_nxp_analog_alt_mode_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_nxp_digital_filter 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_nxp_digital_filter_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_nxp_i2c_pullup 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_nxp_i2c_pullup_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_nxp_i2c_mode 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_nxp_i2c_mode_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_bias_pull_up 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_bias_pull_down 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_drive_push_pull 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_drive_push_pull_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_drive_open_drain 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_drive_open_drain_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_input_schmitt_enable 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0_P_input_schmitt_enable_EXISTS 1

/*
 * Devicetree node: /soc/iocon@40001000/pinctrl/pinmux_flexcomm4_i2c/group0
 *
 * Node identifier: DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_PATH "/soc/iocon@40001000/pinctrl/pinmux_flexcomm4_i2c/group0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_FULL_NAME "group0"

/* Node parent (/soc/iocon@40001000/pinctrl/pinmux_flexcomm4_i2c) identifier: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_PARENT DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_ORD 46

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_REQUIRES_ORDS \
	26, /* /soc/iocon@40001000/pinctrl/pinmux_flexcomm4_i2c */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_REG_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_RANGES_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_IRQ_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_pinmux {26214401 /* 0x1900001 */, 27262977 /* 0x1a00001 */}
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_pinmux_IDX_0 26214401
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_pinmux_IDX_1 27262977
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, pinmux, 0) \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, pinmux, 1)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, pinmux, 1)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, pinmux, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, pinmux, 1, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_pinmux_LEN 2
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate "standard"
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_STRING_UNQUOTED standard
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_STRING_TOKEN standard
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_STRING_UPPER_TOKEN STANDARD
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_IDX_0 "standard"
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_ENUM_VAL_standard_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_ENUM_TOKEN standard
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_ENUM_UPPER_TOKEN STANDARD
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, slew_rate, 0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, slew_rate, 0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, slew_rate, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0, slew_rate, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_LEN 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_nxp_invert 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_nxp_invert_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_nxp_analog_mode 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_nxp_analog_mode_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_nxp_analog_alt_mode 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_nxp_analog_alt_mode_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_nxp_digital_filter 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_nxp_digital_filter_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_nxp_i2c_pullup 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_nxp_i2c_pullup_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_nxp_i2c_mode 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_nxp_i2c_mode_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_bias_pull_up 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_bias_pull_down 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_drive_push_pull 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_drive_push_pull_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_drive_open_drain 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_drive_open_drain_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_input_schmitt_enable 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0_P_input_schmitt_enable_EXISTS 1

/*
 * Devicetree node: /soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi/group0
 *
 * Node identifier: DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_PATH "/soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi/group0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_FULL_NAME "group0"

/* Node parent (/soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi) identifier: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_PARENT DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_ORD 47

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_REQUIRES_ORDS \
	28, /* /soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_REG_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_RANGES_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_IRQ_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_pinmux {34603012 /* 0x2100004 */}
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_pinmux_IDX_0 34603012
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0, pinmux, 0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0, pinmux, 0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0, pinmux, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0, pinmux, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_pinmux_LEN 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate "standard"
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_STRING_UNQUOTED standard
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_STRING_TOKEN standard
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_STRING_UPPER_TOKEN STANDARD
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_IDX_0 "standard"
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_ENUM_VAL_standard_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_ENUM_TOKEN standard
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_ENUM_UPPER_TOKEN STANDARD
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0, slew_rate, 0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0, slew_rate, 0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0, slew_rate, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0, slew_rate, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_LEN 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_nxp_invert 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_nxp_invert_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_nxp_analog_mode 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_nxp_analog_mode_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_nxp_analog_alt_mode 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_nxp_analog_alt_mode_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_nxp_digital_filter 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_nxp_digital_filter_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_nxp_i2c_pullup 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_nxp_i2c_pullup_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_nxp_i2c_mode 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_nxp_i2c_mode_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_bias_pull_up 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_bias_pull_down 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_drive_push_pull 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_drive_push_pull_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_drive_open_drain 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_drive_open_drain_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_input_schmitt_enable 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0_P_input_schmitt_enable_EXISTS 1

/*
 * Devicetree node: /soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi/group1
 *
 * Node identifier: DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_PATH "/soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi/group1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_FULL_NAME "group1"

/* Node parent (/soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi) identifier: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_PARENT DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_ORD 48

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_REQUIRES_ORDS \
	28, /* /soc/iocon@40001000/pinctrl/pinmux_flexcomm5_spi */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_REG_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_RANGES_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_IRQ_NUM 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_pinmux {18874369 /* 0x1200001 */, 19922945 /* 0x1300001 */, 20971521 /* 0x1400001 */}
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_pinmux_IDX_0 18874369
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_pinmux_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_pinmux_IDX_1 19922945
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_pinmux_IDX_1_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_pinmux_IDX_2 20971521
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_pinmux_IDX_2_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_pinmux_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, pinmux, 0) \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, pinmux, 1) \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, pinmux, 2)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, pinmux, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, pinmux, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, pinmux, 2)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_pinmux_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, pinmux, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, pinmux, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, pinmux, 2, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_pinmux_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, pinmux, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, pinmux, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, pinmux, 2, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_pinmux_LEN 3
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_pinmux_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate "standard"
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_STRING_UNQUOTED standard
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_STRING_TOKEN standard
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_STRING_UPPER_TOKEN STANDARD
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_IDX_0 "standard"
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_IDX_0_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_ENUM_IDX 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_ENUM_VAL_standard_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_ENUM_TOKEN standard
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_ENUM_UPPER_TOKEN STANDARD
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, slew_rate, 0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, slew_rate, 0)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, slew_rate, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1, slew_rate, 0, __VA_ARGS__)
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_LEN 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_slew_rate_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_nxp_invert 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_nxp_invert_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_nxp_analog_mode 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_nxp_analog_mode_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_nxp_analog_alt_mode 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_nxp_analog_alt_mode_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_nxp_digital_filter 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_nxp_digital_filter_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_nxp_i2c_pullup 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_nxp_i2c_pullup_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_nxp_i2c_mode 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_nxp_i2c_mode_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_bias_pull_up 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_bias_pull_up_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_bias_pull_down 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_bias_pull_down_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_drive_push_pull 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_drive_push_pull_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_drive_open_drain 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_drive_open_drain_EXISTS 1
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_input_schmitt_enable 0
#define DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1_P_input_schmitt_enable_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_flash_controller        DT_N_S_soc_S_flash_controller_4009c000
#define DT_CHOSEN_zephyr_flash_controller_EXISTS 1
#define DT_CHOSEN_zephyr_sram                    DT_N_S_soc_S_memory_20000000
#define DT_CHOSEN_zephyr_sram_EXISTS             1
#define DT_CHOSEN_zephyr_flash                   DT_N_S_soc_S_flash_controller_4009c000_S_flash_0
#define DT_CHOSEN_zephyr_flash_EXISTS            1
#define DT_CHOSEN_zephyr_console                 DT_N_S_soc_S_flexcomm_40086000
#define DT_CHOSEN_zephyr_console_EXISTS          1
#define DT_CHOSEN_zephyr_shell_uart              DT_N_S_soc_S_flexcomm_40086000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS       1
#define DT_CHOSEN_zephyr_code_partition          DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0
#define DT_CHOSEN_zephyr_code_partition_EXISTS   1
#define DT_CHOSEN_zephyr_ipc_shm                 DT_N_S_memory_4000000
#define DT_CHOSEN_zephyr_ipc_shm_EXISTS          1
#define DT_CHOSEN_zephyr_ipc                     DT_N_S_soc_S_mailbox_4008b000
#define DT_CHOSEN_zephyr_ipc_EXISTS              1

/* Macros for iterating over all nodes and enabled nodes */
#define DT_FOREACH_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_syscon_40000000) fn(DT_N_S_soc_S_memory_20000000) fn(DT_N_S_soc_S_memory_20010000) fn(DT_N_S_soc_S_memory_20020000) fn(DT_N_S_soc_S_memory_04000000) fn(DT_N_S_soc_S_flash_controller_4009c000) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000) fn(DT_N_S_soc_S_iocon_40001000) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1) fn(DT_N_S_soc_S_gpio_0) fn(DT_N_S_soc_S_gpio_1) fn(DT_N_S_soc_S_pint_40004000) fn(DT_N_S_soc_S_mailbox_4008b000) fn(DT_N_S_soc_S_flexcomm_40086000) fn(DT_N_S_soc_S_flexcomm_40087000) fn(DT_N_S_soc_S_flexcomm_40088000) fn(DT_N_S_soc_S_flexcomm_40089000) fn(DT_N_S_soc_S_flexcomm_4008a000) fn(DT_N_S_soc_S_flexcomm_40096000) fn(DT_N_S_soc_S_flexcomm_40097000) fn(DT_N_S_soc_S_flexcomm_40098000) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_leds_S_led_1) fn(DT_N_S_leds_S_led_2) fn(DT_N_S_gpio_keys) fn(DT_N_S_gpio_keys_S_button_0) fn(DT_N_S_gpio_keys_S_button_1) fn(DT_N_S_gpio_keys_S_button_2) fn(DT_N_S_memory_4000000)
#define DT_FOREACH_OKAY_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_syscon_40000000) fn(DT_N_S_soc_S_memory_20000000) fn(DT_N_S_soc_S_memory_20010000) fn(DT_N_S_soc_S_memory_20020000) fn(DT_N_S_soc_S_memory_04000000) fn(DT_N_S_soc_S_flash_controller_4009c000) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000) fn(DT_N_S_soc_S_iocon_40001000) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm0_usart_S_group0) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm4_i2c_S_group0) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group0) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl_S_pinmux_flexcomm5_spi_S_group1) fn(DT_N_S_soc_S_gpio_0) fn(DT_N_S_soc_S_gpio_1) fn(DT_N_S_soc_S_pint_40004000) fn(DT_N_S_soc_S_mailbox_4008b000) fn(DT_N_S_soc_S_flexcomm_40086000) fn(DT_N_S_soc_S_flexcomm_4008a000) fn(DT_N_S_soc_S_flexcomm_40096000) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_leds) fn(DT_N_S_leds_S_led_0) fn(DT_N_S_leds_S_led_1) fn(DT_N_S_leds_S_led_2) fn(DT_N_S_gpio_keys) fn(DT_N_S_gpio_keys_S_button_0) fn(DT_N_S_gpio_keys_S_button_1) fn(DT_N_S_gpio_keys_S_button_2) fn(DT_N_S_memory_4000000)
#define DT_COMPAT_fixed_partitions_LABEL_image_0 DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_0
#define DT_COMPAT_fixed_partitions_LABEL_image_0_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_1 DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_10000
#define DT_COMPAT_fixed_partitions_LABEL_image_1_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_storage DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions_S_partition_30000
#define DT_COMPAT_fixed_partitions_LABEL_storage_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_nxp_lpc54xxx 1
#define DT_COMPAT_HAS_OKAY_nxp_lpc 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_arm_v7m_nvic 1
#define DT_COMPAT_HAS_OKAY_arm_armv7m_systick 1
#define DT_COMPAT_HAS_OKAY_nxp_lpc_syscon 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_zephyr_memory_region 1
#define DT_COMPAT_HAS_OKAY_nxp_iap_fmc54 1
#define DT_COMPAT_HAS_OKAY_soc_nv_flash 1
#define DT_COMPAT_HAS_OKAY_fixed_partitions 1
#define DT_COMPAT_HAS_OKAY_nxp_lpc_iocon 1
#define DT_COMPAT_HAS_OKAY_nxp_lpc_iocon_pinctrl 1
#define DT_COMPAT_HAS_OKAY_nxp_lpc_gpio 1
#define DT_COMPAT_HAS_OKAY_nxp_pint 1
#define DT_COMPAT_HAS_OKAY_nxp_lpc_mailbox 1
#define DT_COMPAT_HAS_OKAY_nxp_lpc_usart 1
#define DT_COMPAT_HAS_OKAY_nxp_lpc_i2c 1
#define DT_COMPAT_HAS_OKAY_nxp_lpc_spi 1
#define DT_COMPAT_HAS_OKAY_arm_cortex_m4f 1
#define DT_COMPAT_HAS_OKAY_gpio_leds 1
#define DT_COMPAT_HAS_OKAY_gpio_keys 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_nxp_lpc54xxx_NUM_OKAY 1
#define DT_N_INST_nxp_lpc_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_arm_v7m_nvic_NUM_OKAY 1
#define DT_N_INST_arm_armv7m_systick_NUM_OKAY 1
#define DT_N_INST_nxp_lpc_syscon_NUM_OKAY 1
#define DT_N_INST_mmio_sram_NUM_OKAY 5
#define DT_N_INST_zephyr_memory_region_NUM_OKAY 2
#define DT_N_INST_nxp_iap_fmc54_NUM_OKAY 1
#define DT_N_INST_soc_nv_flash_NUM_OKAY 1
#define DT_N_INST_fixed_partitions_NUM_OKAY 1
#define DT_N_INST_nxp_lpc_iocon_NUM_OKAY 1
#define DT_N_INST_nxp_lpc_iocon_pinctrl_NUM_OKAY 1
#define DT_N_INST_nxp_lpc_gpio_NUM_OKAY 2
#define DT_N_INST_nxp_pint_NUM_OKAY 1
#define DT_N_INST_nxp_lpc_mailbox_NUM_OKAY 1
#define DT_N_INST_nxp_lpc_usart_NUM_OKAY 1
#define DT_N_INST_nxp_lpc_i2c_NUM_OKAY 1
#define DT_N_INST_nxp_lpc_spi_NUM_OKAY 1
#define DT_N_INST_arm_cortex_m4f_NUM_OKAY 1
#define DT_N_INST_gpio_leds_NUM_OKAY 1
#define DT_N_INST_gpio_keys_NUM_OKAY 1
#define DT_FOREACH_OKAY_nxp_lpc54xxx(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_nxp_lpc54xxx(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_lpc54xxx(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_lpc54xxx(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_lpc(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_nxp_lpc(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_lpc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_lpc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_v7m_nvic(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100)
#define DT_FOREACH_OKAY_VARGS_arm_v7m_nvic(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_v7m_nvic(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_v7m_nvic(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_armv7m_systick(fn) fn(DT_N_S_soc_S_timer_e000e010)
#define DT_FOREACH_OKAY_VARGS_arm_armv7m_systick(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_armv7m_systick(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_armv7m_systick(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_lpc_syscon(fn) fn(DT_N_S_soc_S_syscon_40000000)
#define DT_FOREACH_OKAY_VARGS_nxp_lpc_syscon(fn, ...) fn(DT_N_S_soc_S_syscon_40000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_lpc_syscon(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_lpc_syscon(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_mmio_sram(fn) fn(DT_N_S_soc_S_memory_20000000) fn(DT_N_S_soc_S_memory_20010000) fn(DT_N_S_soc_S_memory_20020000) fn(DT_N_S_soc_S_memory_04000000) fn(DT_N_S_memory_4000000)
#define DT_FOREACH_OKAY_VARGS_mmio_sram(fn, ...) fn(DT_N_S_soc_S_memory_20000000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_20010000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_20020000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_04000000, __VA_ARGS__) fn(DT_N_S_memory_4000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0) fn(1) fn(2) fn(3) fn(4)
#define DT_FOREACH_OKAY_INST_VARGS_mmio_sram(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__) fn(3, __VA_ARGS__) fn(4, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_memory_region(fn) fn(DT_N_S_soc_S_memory_20010000) fn(DT_N_S_soc_S_memory_20020000)
#define DT_FOREACH_OKAY_VARGS_zephyr_memory_region(fn, ...) fn(DT_N_S_soc_S_memory_20010000, __VA_ARGS__) fn(DT_N_S_soc_S_memory_20020000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_memory_region(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_memory_region(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_iap_fmc54(fn) fn(DT_N_S_soc_S_flash_controller_4009c000)
#define DT_FOREACH_OKAY_VARGS_nxp_iap_fmc54(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_iap_fmc54(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_iap_fmc54(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_soc_nv_flash(fn) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0)
#define DT_FOREACH_OKAY_VARGS_soc_nv_flash(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_soc_nv_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_soc_nv_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_partitions(fn) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions)
#define DT_FOREACH_OKAY_VARGS_fixed_partitions(fn, ...) fn(DT_N_S_soc_S_flash_controller_4009c000_S_flash_0_S_partitions, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_partitions(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_partitions(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_lpc_iocon(fn) fn(DT_N_S_soc_S_iocon_40001000)
#define DT_FOREACH_OKAY_VARGS_nxp_lpc_iocon(fn, ...) fn(DT_N_S_soc_S_iocon_40001000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_lpc_iocon(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_lpc_iocon(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_lpc_iocon_pinctrl(fn) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl)
#define DT_FOREACH_OKAY_VARGS_nxp_lpc_iocon_pinctrl(fn, ...) fn(DT_N_S_soc_S_iocon_40001000_S_pinctrl, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_lpc_iocon_pinctrl(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_lpc_iocon_pinctrl(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_lpc_gpio(fn) fn(DT_N_S_soc_S_gpio_0) fn(DT_N_S_soc_S_gpio_1)
#define DT_FOREACH_OKAY_VARGS_nxp_lpc_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_1, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_lpc_gpio(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_lpc_gpio(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_pint(fn) fn(DT_N_S_soc_S_pint_40004000)
#define DT_FOREACH_OKAY_VARGS_nxp_pint(fn, ...) fn(DT_N_S_soc_S_pint_40004000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_pint(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_pint(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_lpc_mailbox(fn) fn(DT_N_S_soc_S_mailbox_4008b000)
#define DT_FOREACH_OKAY_VARGS_nxp_lpc_mailbox(fn, ...) fn(DT_N_S_soc_S_mailbox_4008b000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_lpc_mailbox(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_lpc_mailbox(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_lpc_usart(fn) fn(DT_N_S_soc_S_flexcomm_40086000)
#define DT_FOREACH_OKAY_VARGS_nxp_lpc_usart(fn, ...) fn(DT_N_S_soc_S_flexcomm_40086000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_lpc_usart(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_lpc_usart(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_lpc_i2c(fn) fn(DT_N_S_soc_S_flexcomm_4008a000)
#define DT_FOREACH_OKAY_VARGS_nxp_lpc_i2c(fn, ...) fn(DT_N_S_soc_S_flexcomm_4008a000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_lpc_i2c(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_lpc_i2c(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_nxp_lpc_spi(fn) fn(DT_N_S_soc_S_flexcomm_40096000)
#define DT_FOREACH_OKAY_VARGS_nxp_lpc_spi(fn, ...) fn(DT_N_S_soc_S_flexcomm_40096000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_nxp_lpc_spi(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_nxp_lpc_spi(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_cortex_m4f(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_arm_cortex_m4f(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_cortex_m4f(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_cortex_m4f(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_leds(fn) fn(DT_N_S_leds)
#define DT_FOREACH_OKAY_VARGS_gpio_leds(fn, ...) fn(DT_N_S_leds, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_leds(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_leds(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_keys(fn) fn(DT_N_S_gpio_keys)
#define DT_FOREACH_OKAY_VARGS_gpio_keys(fn, ...) fn(DT_N_S_gpio_keys, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_keys(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_keys(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
